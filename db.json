{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/maupassant/source/css/style.scss","path":"css/style.scss","modified":0,"renderable":1},{"_id":"themes/maupassant/source/css/jquery.fancybox.css","path":"css/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/maupassant/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/maupassant/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/maupassant/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/maupassant/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/maupassant/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/maupassant/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/codeblock-resizer.js","path":"js/codeblock-resizer.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/fancybox.js","path":"js/fancybox.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/share.js","path":"js/share.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/smartresize.js","path":"js/smartresize.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/totop.js","path":"js/totop.js","modified":0,"renderable":1},{"_id":"source/downloads/mysql01/ddl/hr_schema.sql","path":"downloads/mysql01/ddl/hr_schema.sql","modified":0,"renderable":0},{"_id":"source/downloads/weather/3.png","path":"downloads/weather/3.png","modified":0,"renderable":0},{"_id":"source/downloads/weather/4.png","path":"downloads/weather/4.png","modified":0,"renderable":0},{"_id":"source/downloads/mysql01/imgs/1.png","path":"downloads/mysql01/imgs/1.png","modified":0,"renderable":0},{"_id":"source/downloads/mysql01/imgs/egg-bhurji.jpg","path":"downloads/mysql01/imgs/egg-bhurji.jpg","modified":0,"renderable":0},{"_id":"source/downloads/mysql01/imgs/hr-schema.jpg","path":"downloads/mysql01/imgs/hr-schema.jpg","modified":0,"renderable":0}],"Cache":[{"_id":"themes/maupassant/LICENSE","hash":"b7ea1dbb2fed3410d78bc7c125e1d80927b56981","modified":1474128161915},{"_id":"themes/maupassant/README.md","hash":"1e0e701e5ea813f7951f3fe3dac2de5ccf0ba0db","modified":1474128161916},{"_id":"themes/maupassant/_config.yml","hash":"0dd4e47153c64def203ed9490b74e5740fa59691","modified":1474247934787},{"_id":"themes/maupassant/package.json","hash":"04ca87ea475f37841d3610fe5806feb8022416c3","modified":1474128161930},{"_id":"source/_posts/Agile-ISTQB-Certification-Worthy.md","hash":"68d1842b08fa17ea758b3ad3840253886cf36ede","modified":1474171020063},{"_id":"source/_posts/Agile-Personas.md","hash":"890251056e7e63ec2a00677ba5c7d3b207c1e0be","modified":1474171020046},{"_id":"source/_posts/Agile-Testing.md","hash":"17ac1459280731ec6307dc87c30cf55508c68fc4","modified":1474090054641},{"_id":"source/_posts/Docker-MongoDB-Up-and-Running-in-Minutes.md","hash":"258259cd3684837a22941b7219ade84f31792c4d","modified":1474211692720},{"_id":"source/_posts/Docker-PostgreSQL.md","hash":"e60bcecef822977e5a873354349ac9706004f6d0","modified":1474206888673},{"_id":"source/_posts/How-to-make-Egg-Bhurji.md","hash":"63ddf5d8f55e7510b1bde301ab29b9813e3b6f5d","modified":1474132651252},{"_id":"source/_posts/JMeter-Getting-started.md","hash":"7928a1ecd65dde37aacc6d83494f217e95532ea4","modified":1474171366744},{"_id":"source/_posts/MongoDB-Aggregation.md","hash":"1a0baa1d1576f7fa230f071b52b7119c16aeb3cf","modified":1474171366758},{"_id":"source/_posts/MongoDB-Basic-NoSQLs.md","hash":"be9f285ee462a7429f85de6fe520da58aad46fbc","modified":1474171366682},{"_id":"source/_posts/QAs-must-be-Parents.md","hash":"3fa20481c2bca14f9b5af00d4c583d1a49f813ed","modified":1474171628023},{"_id":"source/_posts/RESTful-API-Basics.md","hash":"87d8f3ede4476e24aeca05b5d08cd76115aea3f9","modified":1474248636057},{"_id":"source/_posts/SOAPUI-Orchestrating-multiple-MicroService-APIs.md","hash":"45780d4af1138b9508f79064c8c7cb032169b740","modified":1474249461016},{"_id":"source/_posts/SQL-Structured-Query-Language.md","hash":"dc58ab3a4c7c744d2c02134c13f26c0532c8cb94","modified":1474171489224},{"_id":"source/_posts/SQL-Tricks-Date-Functions.md","hash":"0071758e0a0298cf64c86da6f9cf2e80ac9efa90","modified":1474248694140},{"_id":"source/_posts/SQL-Tricks-Finding-Duplicates.md","hash":"df71e7fb51179dc48a26a520598ce701853c95e7","modified":1474248422278},{"_id":"source/_posts/SQL-Tricks-Indexs.md","hash":"74d0cee71fe0d788865c4f233d06e8cef50d05dd","modified":1474248667961},{"_id":"source/_posts/SQL-Tricks-String-Functions.md","hash":"02e6f5e8daaf0bc93c0d31b77f1d3918438dbe51","modified":1474248667951},{"_id":"source/_posts/SQL-Tricks-Tree-Walking.md","hash":"c9eed4c69826ec5c509cb683c35d0af614ce6358","modified":1474171520490},{"_id":"source/_posts/SoapUI-Asserting-data-in-MongoDB-collections.md","hash":"d1f741105c896f28ba19e2a83e6f18d68a651c0d","modified":1474171366698},{"_id":"source/_posts/Testing-RESTful-API.md","hash":"6b1d13cc81797a8bb32425d912747b91ce36694f","modified":1474338110091},{"_id":"source/_posts/docker.md","hash":"ad873067f093b993b2c074634b9dddfed0292eaf","modified":1474171092803},{"_id":"source/about/index.md","hash":"766109fb1ec1ccbca077ab3fc9e1407ef91aa49a","modified":1474203598529},{"_id":"themes/maupassant/languages/de-DE.yml","hash":"25d1d8cd8113045a7603c14af1ea1539fc6456ed","modified":1474128161917},{"_id":"themes/maupassant/languages/en.yml","hash":"4a3ce053068bda800bc6529ca77ca4998d17a48f","modified":1474132727102},{"_id":"themes/maupassant/languages/es-ES.yml","hash":"3cc9312fbdba4a8f8e8254804121e4724c719bcc","modified":1474128161918},{"_id":"themes/maupassant/languages/fr-FR.yml","hash":"3a50568f200b9c1258415b53727e42c6b6c7ea0b","modified":1474128161918},{"_id":"themes/maupassant/languages/ko.yml","hash":"a454bcec60113507bc1d593a699849822386c196","modified":1474128161918},{"_id":"themes/maupassant/languages/zh-CN.yml","hash":"41f7c09365cbd5ba1b8906191ee07bc75094185a","modified":1474128161919},{"_id":"themes/maupassant/languages/zh-TW.yml","hash":"46659764e31c7866af436d98d4fabb9da122037a","modified":1474128161919},{"_id":"themes/maupassant/layout/archive.jade","hash":"d70d1ed241b1a431a2434768d02bb2de03070f70","modified":1474128161927},{"_id":"themes/maupassant/layout/base-without-sidebar.jade","hash":"baa6072d381a54f2436365846649799a4a277803","modified":1474128161927},{"_id":"themes/maupassant/layout/base.jade","hash":"0b38ac1877626717947dd3a0d4089ffbd982b336","modified":1474173425661},{"_id":"themes/maupassant/layout/index.jade","hash":"3fe1f0c5021ac696ed9846ecb1c75d285fa46708","modified":1474171897543},{"_id":"themes/maupassant/layout/page.jade","hash":"1e98aa785073dc1bbfe70f2863bc19fe287483b9","modified":1474128161928},{"_id":"themes/maupassant/layout/post.jade","hash":"f68f483242409f501bbc8b50ff129edd981087e2","modified":1474128161929},{"_id":"themes/maupassant/layout/single-column.jade","hash":"4be14ac93c154216e174fe0c4c05608c26f59c42","modified":1474128161929},{"_id":"themes/maupassant/layout/timeline.jade","hash":"ee1e8e4e8fdf61c6d19f1f7fe31ab50ab1465a8d","modified":1474128161930},{"_id":"themes/maupassant/layout/_partial/after_footer.jade","hash":"7e69266c3d1b9d872617046ca0630998200072fd","modified":1474128161920},{"_id":"themes/maupassant/layout/_partial/footer.jade","hash":"87e096caac8e780c0894ef1844f59246f861bbe7","modified":1474128161921},{"_id":"themes/maupassant/layout/_partial/comments.jade","hash":"b3a0b0ce0642f2bfe9df94b075c0c2a083871e1b","modified":1474128161921},{"_id":"themes/maupassant/layout/_partial/helpers.jade","hash":"9e44f6d32f2449b4109c33118f8285fa2fc7b023","modified":1474128161922},{"_id":"themes/maupassant/layout/_partial/mathjax.jade","hash":"ac6e3a92bf18ab6bbd0e041b6796b295bae963ee","modified":1474128161922},{"_id":"themes/maupassant/layout/_partial/mathjax2.jade","hash":"234a792e64ba208fa97d2f99772ece23056a53ec","modified":1474128161922},{"_id":"themes/maupassant/layout/_partial/paginator.jade","hash":"03ad0c49ae6f8a999ae35b38d08e25775f51f52a","modified":1474128161923},{"_id":"themes/maupassant/layout/_partial/post_nav.jade","hash":"b11d9e6000449838b17f508429f29ffb60f53096","modified":1474128161923},{"_id":"themes/maupassant/layout/_partial/tag.jade","hash":"6145b483b271bba05ad1db7c039fe352a768215b","modified":1474128161923},{"_id":"themes/maupassant/layout/_partial/totop.jade","hash":"eb91a3baf9411188c7c8130f63a674f541ca9c81","modified":1474128161924},{"_id":"themes/maupassant/layout/_widget/category.jade","hash":"8511b412867137a602e1778d4744edb12ef988db","modified":1474248254975},{"_id":"themes/maupassant/layout/_widget/links.jade","hash":"45ce760a0eaabf736c425980c3e6fb87f437b76c","modified":1474132950205},{"_id":"themes/maupassant/layout/_widget/recent_comments.jade","hash":"92a66bec73a7929ec541930a394f5f4cb80edfbf","modified":1474248290606},{"_id":"themes/maupassant/layout/_widget/recent_posts.jade","hash":"e8da74998ec7a986343d12c41c04a78970fba0e4","modified":1474248290616},{"_id":"themes/maupassant/layout/_widget/search.jade","hash":"c5301ca7f2ec24d790fd7f35f69f8fd8acbdb725","modified":1474128161926},{"_id":"themes/maupassant/layout/_widget/tag.jade","hash":"734cb94cfcfc7213679b5ce970da0df8a5c2612b","modified":1474248290626},{"_id":"themes/maupassant/source/css/style.scss","hash":"3a00b275276847b054e71ea2eee47f548cd55dbf","modified":1474128161932},{"_id":"themes/maupassant/source/css/jquery.fancybox.css","hash":"0d142e11e27e9de1a325c32369c42254101ddd34","modified":1474128161931},{"_id":"themes/maupassant/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1474128161933},{"_id":"themes/maupassant/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1474128161933},{"_id":"themes/maupassant/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1474128161934},{"_id":"themes/maupassant/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1474128161934},{"_id":"themes/maupassant/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1474128161935},{"_id":"themes/maupassant/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1474128161935},{"_id":"themes/maupassant/source/js/codeblock-resizer.js","hash":"c77270e684a60babc1abb7353e700ecdc5a66d30","modified":1474128161936},{"_id":"themes/maupassant/source/js/fancybox.js","hash":"8a993c1c4ad40789d2960b682cb2130382a0f26a","modified":1474128161936},{"_id":"themes/maupassant/source/js/search.js","hash":"9cf2337fe9af34055782880ac27b93713d74581f","modified":1474128161937},{"_id":"themes/maupassant/source/js/share.js","hash":"bb6880e2e8e187b576daf326476f09b0907fbe14","modified":1474128161937},{"_id":"themes/maupassant/source/js/smartresize.js","hash":"150ab1cad40d7ae081b0896b13f7d7cbac4e6338","modified":1474128161937},{"_id":"themes/maupassant/source/js/totop.js","hash":"15de186b089c245fe60766d509b587919f05ff23","modified":1474128161938},{"_id":"public/about/index.html","hash":"1b9788c24fac5a275c3acc2a4daa37604c2b56cb","modified":1474248437447},{"_id":"public/2016/SoapUI-Asserting-data-in-MongoDB-collections.html","hash":"33137084e5bbe4d2c73e83c193f10b10e3f4713a","modified":1474337808175},{"_id":"public/2016/MongoDB-Aggregation.html","hash":"80f6d2ba4492d4488525a0683c55242bdb389882","modified":1474337808176},{"_id":"public/2016/MongoDB-Basic-NoSQLs.html","hash":"65c9ea1471adc6a9da38e32119c7c9943455b645","modified":1474337808176},{"_id":"public/2016/JMeter-Getting-started.html","hash":"56c35cb68927f6fcfb389df20c9d31f4e86d4521","modified":1474337808176},{"_id":"public/2016/SOAPUI-Orchestrating-multiple-MicroService-APIs.html","hash":"c59d65a696a6614c3d5f7c41191120b5bd790ce5","modified":1474337808176},{"_id":"public/2016/Agile-ISTQB-Certification-Worthy.html","hash":"8e3468758c06070518f2e5447296f8abd81a8995","modified":1474337808177},{"_id":"public/2016/Agile-Personas.html","hash":"506f6ce14c6d8315f1716a0c5da907d7e17c84a6","modified":1474337808177},{"_id":"public/2016/QAs-must-be-Parents.html","hash":"41f23d324ebe7ef1c4bef3e42a962db26117c741","modified":1474337808177},{"_id":"public/2016/Docker-MongoDB-Up-and-Running-in-Minutes.html","hash":"f551d6d0b756ce54ebaa5102df49d88dc3601c5f","modified":1474337808177},{"_id":"public/2016/Docker-PostgreSQL.html","hash":"a1a15a8dac59656b9ccf01787963b50786485616","modified":1474337808177},{"_id":"public/2016/SQL-Tricks-Indexs.html","hash":"e6703db43d8270e3d10b4ade32869b3ff04975d1","modified":1474337808177},{"_id":"public/2016/SQL-Tricks-String-Functions.html","hash":"6ece59e774443b6bebecd0ca5e52c1ffc4251c96","modified":1474337808177},{"_id":"public/2016/SQL-Tricks-Date-Functions.html","hash":"4285342ee39d32b765c1958e4cdb53f749683860","modified":1474337808177},{"_id":"public/2016/SQL-Tricks-Tree-Walking.html","hash":"7d7c40fb6cdf777ee8786faf0df07cbfe97355f9","modified":1474337808178},{"_id":"public/2016/SQL-Tricks-Finding-Duplicates.html","hash":"e92556aa310a0a584e7090ed265d63794f219bca","modified":1474337808184},{"_id":"public/2016/Testing-RESTful-API.html","hash":"7f27859b4b5bad4a6c76ff9dc4e44bdbedef145e","modified":1474337808178},{"_id":"public/2016/Agile-Testing.html","hash":"d0be58061c52558c9ef9b064a6d0f3ab132f4a62","modified":1474337808178},{"_id":"public/2016/RESTful-API-Basics.html","hash":"ff8b3a996a78c0ddc14e5b43b0d2ab7109af3baf","modified":1474337808178},{"_id":"public/2016/docker.html","hash":"2e6ccadc5090e77377228e5ac3e668a18a1e6750","modified":1474337808178},{"_id":"public/2014/How-to-make-Egg-Bhurji.html","hash":"a8c2cd22b48eee3274136e64c77a71667511b23c","modified":1474337808178},{"_id":"public/index.html","hash":"7bf8a664462764de1cc35e46b079b9dc2475d02b","modified":1474337808178},{"_id":"public/page/2/index.html","hash":"9e3a135afb182229e356c838f4fd35c62f19fe74","modified":1474337808178},{"_id":"public/page/3/index.html","hash":"0d56a2363dd25b8e3155135d63e704a7726dc61b","modified":1474337808179},{"_id":"public/archives/index.html","hash":"1aec1f693ef169c59027d57f15c47b01b062c6e6","modified":1474337808180},{"_id":"public/archives/page/2/index.html","hash":"d25dbe8c57cdbd1119be9891af1d8533e938fbad","modified":1474337808180},{"_id":"public/archives/page/3/index.html","hash":"9f105c7c8ecc0547e7590f44a80dd05b59d6ae7e","modified":1474337808180},{"_id":"public/archives/2014/index.html","hash":"ecf5398d3ba1a47915ae299da26fcc06662f7338","modified":1474337808180},{"_id":"public/archives/2014/11/index.html","hash":"ecf5398d3ba1a47915ae299da26fcc06662f7338","modified":1474337808181},{"_id":"public/archives/2015/index.html","hash":"704f390e651dc9577dcaa9f219032701069c26cf","modified":1474337808181},{"_id":"public/archives/2015/02/index.html","hash":"704f390e651dc9577dcaa9f219032701069c26cf","modified":1474337808181},{"_id":"public/archives/2016/index.html","hash":"a366e5430a20f39bf336942d63f612d5ca1d75c3","modified":1474337808181},{"_id":"public/archives/2016/page/2/index.html","hash":"160ab834898b67e521d10f344cc6fd969a0be31e","modified":1474337808181},{"_id":"public/archives/2016/02/index.html","hash":"0082d62aa8ebac348a2abf74d8706eaa70092b0e","modified":1474337808182},{"_id":"public/archives/2016/04/index.html","hash":"67d7e63d149dd747725624dd0cd4b5d66ef2e4f9","modified":1474337808182},{"_id":"public/archives/2016/09/index.html","hash":"379945e6ec1f08a14b314689f7dd1f7c43baa8f1","modified":1474337808182},{"_id":"public/archives/2016/09/page/2/index.html","hash":"6660d5c112bfcdffbc20aa86d5cec4d344fb5d33","modified":1474337808182},{"_id":"public/tags/agile/index.html","hash":"69948a5d7c4447bdd2f999bfbebae63bb76af146","modified":1474337808182},{"_id":"public/tags/isstqb/index.html","hash":"ff8a4ecd0a9eaf7646dc7eefe9cdd25048f17e22","modified":1474132552332},{"_id":"public/tags/egg/index.html","hash":"64b2a0142874c1fe635b9e6b3e55d611b3984cd7","modified":1474337808182},{"_id":"public/tags/docker/index.html","hash":"2a3e136a1af8e57066afb95b5a3c8f52a344bf6a","modified":1474337808182},{"_id":"public/tags/postgresql/index.html","hash":"e549ab5414e98b2b798344d62fbccac1704609a5","modified":1474337808182},{"_id":"public/tags/database/index.html","hash":"0106143e138afb4e33b31979b3ec38ae3300bcb2","modified":1474132552334},{"_id":"public/tags/mongodb/index.html","hash":"f3a396aae14b0c7bbcce2e6390a229f794c878ff","modified":1474337808182},{"_id":"public/tags/nosql/index.html","hash":"986c4846f6a36e51b98e60c31923f217b93a04d8","modified":1474337808182},{"_id":"public/tags/jmeter/index.html","hash":"db583943ef208fd3312a9ad07f5d28a24f614b19","modified":1474337808183},{"_id":"public/tags/performance/index.html","hash":"7cdccb338dcc5f2cff832bf0e7635e7a72fc40d5","modified":1474337808183},{"_id":"public/tags/automation/index.html","hash":"4d8e0ffaae8478473349850baaf36daf37ccc9fe","modified":1474132552334},{"_id":"public/tags/REST/index.html","hash":"55106215ff87d05895e44aa1e1eaf02f48eb993c","modified":1474337808183},{"_id":"public/tags/API/index.html","hash":"aa823da1e2f805eb7ea8b2b1fb335b8cb42af947","modified":1474337808183},{"_id":"public/tags/sql-sql-joins-mysql/index.html","hash":"4e8ac4cbb3a4bb68dcf227a777a2152662ff34b9","modified":1474132552334},{"_id":"public/tags/mysql/index.html","hash":"46fdac448499169875266308c79e1ade4980f115","modified":1474337808183},{"_id":"public/categories/testing/index.html","hash":"2b113632e037c180874284fbc71913a9bfd2b007","modified":1474337808179},{"_id":"public/categories/cooking/index.html","hash":"f22d761a64f7544f2f8afd382d32a83820001a31","modified":1474337808179},{"_id":"public/categories/tools/index.html","hash":"c99d6a07cf0676733b6afc69ad610a753b895bc0","modified":1474337808179},{"_id":"public/2015/SQL-Structured-Query-Language.html","hash":"6aa19f0b39506c8d9664415969051e71a9f553cb","modified":1474337808184},{"_id":"public/categories/testing/tools/index.html","hash":"d6e63b898a374fc0b2b3f14dbfa17d1674443db4","modified":1474132552330},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1474131521650},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1474131521650},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1474131521650},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1474131521650},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1474131521650},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1474131521650},{"_id":"public/css/jquery.fancybox.css","hash":"f42f761157f26244673eb2f4a9215c70956f80dc","modified":1474131521687},{"_id":"public/js/codeblock-resizer.js","hash":"5d0b786d60bf225d9eabcc9cece2719ff4d9b6cd","modified":1474131521687},{"_id":"public/js/smartresize.js","hash":"3ef157fd877167e3290f42c67a624ea375a46c24","modified":1474131521687},{"_id":"public/js/search.js","hash":"53db2eb255dd40a412ed62ea7332ca5a22f7816f","modified":1474131521687},{"_id":"public/js/share.js","hash":"f49776e0baa2b913ddc7a20db24b3edd469c8343","modified":1474131521687},{"_id":"public/js/fancybox.js","hash":"13c4781570339f4fba76a3d7f202e442817dd605","modified":1474131521687},{"_id":"public/js/totop.js","hash":"7dbf8fcf582a4fb6eb9b2c60d6de9f9c2091ec4c","modified":1474131521688},{"_id":"public/css/style.css","hash":"2afb6e7e24abf81c8b7b7d472fb0bb9b9a1eac16","modified":1474131521688},{"_id":"public/tags/istqb/index.html","hash":"83ff77a1643b643e0b1792aa18af122cbd859a3c","modified":1474337808183},{"_id":"public/tags/persona/index.html","hash":"c57b7a7587c10aeede9fd758790c54f54268fa01","modified":1474337808183},{"_id":"public/tags/SoapUI/index.html","hash":"2d6268ce37c135bea3f4f15ae7943a0f394738bb","modified":1474337808183},{"_id":"public/tags/SQL/index.html","hash":"6e2fd0cb1cc58871e9d71b43f60651df4823064f","modified":1474337808183},{"_id":"public/tags/testing/index.html","hash":"eb8d08c4480838a0264b27df64fd8cd18b31754a","modified":1474337808183},{"_id":"public/categories/agile/index.html","hash":"16ff22522e7c1c304822121a3689df5f09d1b261","modified":1474337808179},{"_id":"public/categories/certification/index.html","hash":"f4dbf0aaeb42b875ee038dd23699cd90ded3280b","modified":1474337808179},{"_id":"public/categories/database/index.html","hash":"d82a4ad3c08eb90b1048e53eaec1d53cef42eb1d","modified":1474337808180},{"_id":"public/categories/tools/database/index.html","hash":"70ddc3ada1ad5915a1496aa4e81e85ec73d1a539","modified":1474337808180},{"_id":"public/categories/general/index.html","hash":"6996b99612bb52ffb461bc9b8bf74ab60bc7d655","modified":1474337808180},{"_id":"public/tags/PostgreSQL/index.html","hash":"2620553dd73f6d5140d682f598757f2c56f22c20","modified":1474337808184},{"_id":"source/downloads/keep.keep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1474324742931},{"_id":"source/_posts/Appium-Getting-Started.md","hash":"f64bb428578f334af395d50f080d6dec5003cd39","modified":1474300165144},{"_id":"public/2016/Appium-Getting-Started.html","hash":"b2e42106e9b696c1cb82fd3e869ac8a734163b5d","modified":1474337808185},{"_id":"public/downloads/keep.keep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1474337808189},{"_id":"source/downloads/mysql01/ddl/hr_schema.sql","hash":"29d2b46f7c08033e669125a8372b4e6bd3d1651b","modified":1473983387910},{"_id":"source/downloads/weather/3.png","hash":"0d77d72078d662f6e9db468ea6cc5debde860281","modified":1474336979951},{"_id":"source/downloads/weather/4.png","hash":"88841c8417bdfffaf4dcede6bacf4e55b4947ebd","modified":1474337013932},{"_id":"source/downloads/mysql01/imgs/1.png","hash":"2210c04b6c1b3e8950fc919933e60907ddc2ccbc","modified":1474300667610},{"_id":"source/downloads/mysql01/imgs/egg-bhurji.jpg","hash":"6370c8b398dc03d0e9be3e947c3c10c8dda0dd29","modified":1473993536133},{"_id":"source/downloads/mysql01/imgs/hr-schema.jpg","hash":"da8fc7e5edd2cb88d3b1d0f21c52db395bc8dcb4","modified":1473982994823}],"Category":[{"name":"testing","_id":"cit7fugn800037gvbwq6i0i1w"},{"name":"cooking","_id":"cit7fugnq000e7gvbybhn75l4"},{"name":"tools","_id":"cit7fugnx000m7gvbc0ynlivu"},{"name":"tools","parent":"cit7fugn800037gvbwq6i0i1w","_id":"cit7fugo8000y7gvbne96id6r"},{"name":"testing - agile","_id":"cit83ahhh0000fkvbsgn50chi"},{"name":"agile","_id":"cit83b3gm0004fkvbwbb839sh"},{"name":"certification","_id":"cit83bg210006fkvbk0ea0s24"},{"name":"agile","parent":"cit83bg210006fkvbk0ea0s24","_id":"cit83bg230007fkvb9miml5yg"},{"name":"database","parent":"cit7fugnx000m7gvbc0ynlivu","_id":"cit83e4ad000ffkvbm7owe6yu"},{"name":"database","_id":"cit83en3t000ifkvbsmy8uqfr"},{"name":"general","_id":"cit83q43k001hfkvbbdatadr0"}],"Data":[],"Page":[{"title":"About","layout":"single-column","comments":0,"_content":"I am a Software Test Engineer. But in fact, I am a Developer, a Tester, and a User, at least that is how I evolved over time. I am a Software Developer focused on Quality! is just another way to put it. I started this blog to capture my thoughts, notes and other things to ponder.\n\nMost of the time I have no much idea on what I am jotting down, so you should take everything on this site with a grain of salt! :-).\n\nI do believe that mistakes are opportunities to learn, I take criticisms positively. Please do let me know if you find something wrong in my posts.\n\n<a href=\"https://github.com/manjupaul\"><i class=\"fa fa-github fa-3x\" aria-hidden=\"true\"></i></a> &nbsp; &nbsp; <a href=\"https://www.linkedin.com/in/manju-paul-898a78126\"><i class=\"fa fa-linkedin fa-3x\" aria-hidden=\"true\"></i></a>","source":"about/index.md","raw":"---\ntitle: About\nlayout: single-column\ncomments: false\n---\nI am a Software Test Engineer. But in fact, I am a Developer, a Tester, and a User, at least that is how I evolved over time. I am a Software Developer focused on Quality! is just another way to put it. I started this blog to capture my thoughts, notes and other things to ponder.\n\nMost of the time I have no much idea on what I am jotting down, so you should take everything on this site with a grain of salt! :-).\n\nI do believe that mistakes are opportunities to learn, I take criticisms positively. Please do let me know if you find something wrong in my posts.\n\n<a href=\"https://github.com/manjupaul\"><i class=\"fa fa-github fa-3x\" aria-hidden=\"true\"></i></a> &nbsp; &nbsp; <a href=\"https://www.linkedin.com/in/manju-paul-898a78126\"><i class=\"fa fa-linkedin fa-3x\" aria-hidden=\"true\"></i></a>","date":"2016-09-18T12:59:58.533Z","updated":"2016-09-18T12:59:58.529Z","path":"about/index.html","_id":"cit8mrcno00003ovbedc63ir6","content":"<p>I am a Software Test Engineer. But in fact, I am a Developer, a Tester, and a User, at least that is how I evolved over time. I am a Software Developer focused on Quality! is just another way to put it. I started this blog to capture my thoughts, notes and other things to ponder.</p>\n<p>Most of the time I have no much idea on what I am jotting down, so you should take everything on this site with a grain of salt! :-).</p>\n<p>I do believe that mistakes are opportunities to learn, I take criticisms positively. Please do let me know if you find something wrong in my posts.</p>\n<p><a href=\"https://github.com/manjupaul\" target=\"_blank\" rel=\"external\"><i class=\"fa fa-github fa-3x\" aria-hidden=\"true\"></i></a> &nbsp; &nbsp; <a href=\"https://www.linkedin.com/in/manju-paul-898a78126\" target=\"_blank\" rel=\"external\"><i class=\"fa fa-linkedin fa-3x\" aria-hidden=\"true\"></i></a></p>\n","excerpt":"","more":"<p>I am a Software Test Engineer. But in fact, I am a Developer, a Tester, and a User, at least that is how I evolved over time. I am a Software Developer focused on Quality! is just another way to put it. I started this blog to capture my thoughts, notes and other things to ponder.</p>\n<p>Most of the time I have no much idea on what I am jotting down, so you should take everything on this site with a grain of salt! :-).</p>\n<p>I do believe that mistakes are opportunities to learn, I take criticisms positively. Please do let me know if you find something wrong in my posts.</p>\n<p><a href=\"https://github.com/manjupaul\"><i class=\"fa fa-github fa-3x\" aria-hidden=\"true\"></i></a> &nbsp; &nbsp; <a href=\"https://www.linkedin.com/in/manju-paul-898a78126\"><i class=\"fa fa-linkedin fa-3x\" aria-hidden=\"true\"></i></a></p>\n"}],"Post":[{"title":"Agile - ISTQB Certification Worthy?","draft":true,"date":"2016-09-16T14:09:05.000Z","_content":"","source":"_posts/Agile-ISTQB-Certification-Worthy.md","raw":"---\ntitle: Agile - ISTQB Certification Worthy?\ndraft: true\ndate: 2016-09-16 10:09:05\ncategories:\n- certification\ntags: \n- istqb\n- agile\n---\n","slug":"Agile-ISTQB-Certification-Worthy","published":1,"updated":"2016-09-18T03:57:00.063Z","_id":"cit7fugmv00007gvboeoiewci","comments":1,"layout":"post","photos":[],"link":"","content":"","excerpt":"","more":""},{"title":"Agile - Personas","draft":true,"date":"2016-09-16T14:08:24.000Z","_content":"","source":"_posts/Agile-Personas.md","raw":"---\ntitle: Agile - Personas\ndraft: true\ndate: 2016-09-16 10:08:24\ncategories:\n- agile\ntags:\n- persona\n- agile\n---\n","slug":"Agile-Personas","published":1,"updated":"2016-09-18T03:57:00.046Z","_id":"cit7fugn400027gvbkft2k9hy","comments":1,"layout":"post","photos":[],"link":"","content":"","excerpt":"","more":""},{"title":"Agile Testing","date":"2016-09-02T00:39:38.000Z","_content":"# Agile Testing\nThe Agile development model is also a type of Incremental model. Software is developed in incremental, rapid cycles. This results in small incremental releases with each release building on previous functionality. Each release is thoroughly tested to ensure software quality is maintained. It is used for time critical applications.  Extreme Programming (XP) is currently one of the most well known agile development life cycle model.","source":"_posts/Agile-Testing.md","raw":"---\ntitle: Agile Testing\ndate: 2016-09-01 20:39:38\ncategories:\n- testing\ntags: \n- agile\n---\n# Agile Testing\nThe Agile development model is also a type of Incremental model. Software is developed in incremental, rapid cycles. This results in small incremental releases with each release building on previous functionality. Each release is thoroughly tested to ensure software quality is maintained. It is used for time critical applications.  Extreme Programming (XP) is currently one of the most well known agile development life cycle model.","slug":"Agile-Testing","published":1,"updated":"2016-09-17T05:27:34.641Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cit7fugnf00067gvbn7avoh84","content":"<h1 id=\"Agile-Testing\"><a href=\"#Agile-Testing\" class=\"headerlink\" title=\"Agile Testing\"></a>Agile Testing</h1><p>The Agile development model is also a type of Incremental model. Software is developed in incremental, rapid cycles. This results in small incremental releases with each release building on previous functionality. Each release is thoroughly tested to ensure software quality is maintained. It is used for time critical applications.  Extreme Programming (XP) is currently one of the most well known agile development life cycle model.</p>\n","excerpt":"","more":"<h1 id=\"Agile-Testing\"><a href=\"#Agile-Testing\" class=\"headerlink\" title=\"Agile Testing\"></a>Agile Testing</h1><p>The Agile development model is also a type of Incremental model. Software is developed in incremental, rapid cycles. This results in small incremental releases with each release building on previous functionality. Each release is thoroughly tested to ensure software quality is maintained. It is used for time critical applications.  Extreme Programming (XP) is currently one of the most well known agile development life cycle model.</p>\n"},{"title":"Docker - MongoDB Up and Running in Minutes","draft":true,"date":"2016-09-16T14:06:39.000Z","_content":"\nToday, I will show steps to pull a MongoDB docker image and locally running a Mongo database server. I have explained in [Docker](docker.html) post the basics and how to configure and run MySQL. \n\n### Pulling the image\nOnce you identified the [image](https://hub.docker.com/_/mongo/) , you can bring it to your local machine by issuing the `pull`.\n```bash\ndocker pull mongo:2.2\n```\n\n### Starting the MongoDB server\nIt is good to mount a local drive at `/data/db`, that way DB is available even after server restarts. \n```bash\ndocker run --name mongodb -v c:/Users/manju/docker/mongo:/data/db -p 27017:27017 -d mongo:2.2 \n```\nIf the server is successfully started, you could see the process information by running the `ps` command. In my case it shows `2ee14feaa563` is the container ID and it is running for the past 6 seconds.  \n```\nmanju@MANJUTHINK C:\\workspace\\BLOGS\n> docker ps\nCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                      NAMES\n2ee14feaa563        mongo:2.2           \"/entrypoint.sh mongo\"   18 hours ago        Up 6 seconds        0.0.0.0:27017->27017/tcp   mongodb\n03076bd7a501        postgres            \"/docker-entrypoint.s\"   18 hours ago        Up 31 minutes       0.0.0.0:5433->5432/tcp     pg-server\n93f77fd3a7e6        mysql:5.5           \"docker-entrypoint.sh\"   3 days ago          Up 41 seconds       0.0.0.0:3306->3306/tcp     mp-mysql-server\n```\n\n### Connecting to MongoDB server\nI use [RoboMongo](https://robomongo.org/) client to interact with MongoDB. Alternately I can connect using mongo shell as shown below:\n```bash\ndocker exec -it 2e bash\nmongo\n```\nThe output of a successful connection looks like below:\n ```\nmanju@MANJUTHINK C:\\workspace\\BLOGS\n> docker exec -it 2e bash\nroot@2ee14feaa563:/# mongo\nMongoDB shell version: 2.2.7\nconnecting to: test\n> show dbs\nlocal   (empty)\n> use mytest\nswitched to db mytest\n>\n ```\n \n### Conclusion\nI did the MongoDB for DBA course a local docker server always help me to brush up my knowledge. Sometime soon I will be doing a post comparing SQL and NoSQL syntaxes. ","source":"_posts/Docker-MongoDB-Up-and-Running-in-Minutes.md","raw":"---\ntitle: Docker - MongoDB Up and Running in Minutes\ndraft: true\ndate: 2016-09-16 10:06:39\ncategories:\n- tools\n- database\ntags:\n- docker\n- mongodb\n---\n\nToday, I will show steps to pull a MongoDB docker image and locally running a Mongo database server. I have explained in [Docker](docker.html) post the basics and how to configure and run MySQL. \n\n### Pulling the image\nOnce you identified the [image](https://hub.docker.com/_/mongo/) , you can bring it to your local machine by issuing the `pull`.\n```bash\ndocker pull mongo:2.2\n```\n\n### Starting the MongoDB server\nIt is good to mount a local drive at `/data/db`, that way DB is available even after server restarts. \n```bash\ndocker run --name mongodb -v c:/Users/manju/docker/mongo:/data/db -p 27017:27017 -d mongo:2.2 \n```\nIf the server is successfully started, you could see the process information by running the `ps` command. In my case it shows `2ee14feaa563` is the container ID and it is running for the past 6 seconds.  \n```\nmanju@MANJUTHINK C:\\workspace\\BLOGS\n> docker ps\nCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                      NAMES\n2ee14feaa563        mongo:2.2           \"/entrypoint.sh mongo\"   18 hours ago        Up 6 seconds        0.0.0.0:27017->27017/tcp   mongodb\n03076bd7a501        postgres            \"/docker-entrypoint.s\"   18 hours ago        Up 31 minutes       0.0.0.0:5433->5432/tcp     pg-server\n93f77fd3a7e6        mysql:5.5           \"docker-entrypoint.sh\"   3 days ago          Up 41 seconds       0.0.0.0:3306->3306/tcp     mp-mysql-server\n```\n\n### Connecting to MongoDB server\nI use [RoboMongo](https://robomongo.org/) client to interact with MongoDB. Alternately I can connect using mongo shell as shown below:\n```bash\ndocker exec -it 2e bash\nmongo\n```\nThe output of a successful connection looks like below:\n ```\nmanju@MANJUTHINK C:\\workspace\\BLOGS\n> docker exec -it 2e bash\nroot@2ee14feaa563:/# mongo\nMongoDB shell version: 2.2.7\nconnecting to: test\n> show dbs\nlocal   (empty)\n> use mytest\nswitched to db mytest\n>\n ```\n \n### Conclusion\nI did the MongoDB for DBA course a local docker server always help me to brush up my knowledge. Sometime soon I will be doing a post comparing SQL and NoSQL syntaxes. ","slug":"Docker-MongoDB-Up-and-Running-in-Minutes","published":1,"updated":"2016-09-18T15:14:52.720Z","_id":"cit7fugnm000b7gvbd8j9iv88","comments":1,"layout":"post","photos":[],"link":"","content":"<p>Today, I will show steps to pull a MongoDB docker image and locally running a Mongo database server. I have explained in <a href=\"docker.html\">Docker</a> post the basics and how to configure and run MySQL. </p>\n<h3 id=\"Pulling-the-image\"><a href=\"#Pulling-the-image\" class=\"headerlink\" title=\"Pulling the image\"></a>Pulling the image</h3><p>Once you identified the <a href=\"https://hub.docker.com/_/mongo/\" target=\"_blank\" rel=\"external\">image</a> , you can bring it to your local machine by issuing the <code>pull</code>.<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker pull mongo:2.2</div></pre></td></tr></table></figure></p>\n<h3 id=\"Starting-the-MongoDB-server\"><a href=\"#Starting-the-MongoDB-server\" class=\"headerlink\" title=\"Starting the MongoDB server\"></a>Starting the MongoDB server</h3><p>It is good to mount a local drive at <code>/data/db</code>, that way DB is available even after server restarts.<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker run --name mongodb -v c:/Users/manju/docker/mongo:/data/db -p 27017:27017 <span class=\"_\">-d</span> mongo:2.2</div></pre></td></tr></table></figure></p>\n<p>If the server is successfully started, you could see the process information by running the <code>ps</code> command. In my case it shows <code>2ee14feaa563</code> is the container ID and it is running for the past 6 seconds.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">manju@MANJUTHINK C:\\workspace\\BLOGS</div><div class=\"line\">&gt; docker ps</div><div class=\"line\">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                      NAMES</div><div class=\"line\">2ee14feaa563        mongo:2.2           &quot;/entrypoint.sh mongo&quot;   18 hours ago        Up 6 seconds        0.0.0.0:27017-&gt;27017/tcp   mongodb</div><div class=\"line\">03076bd7a501        postgres            &quot;/docker-entrypoint.s&quot;   18 hours ago        Up 31 minutes       0.0.0.0:5433-&gt;5432/tcp     pg-server</div><div class=\"line\">93f77fd3a7e6        mysql:5.5           &quot;docker-entrypoint.sh&quot;   3 days ago          Up 41 seconds       0.0.0.0:3306-&gt;3306/tcp     mp-mysql-server</div></pre></td></tr></table></figure></p>\n<h3 id=\"Connecting-to-MongoDB-server\"><a href=\"#Connecting-to-MongoDB-server\" class=\"headerlink\" title=\"Connecting to MongoDB server\"></a>Connecting to MongoDB server</h3><p>I use <a href=\"https://robomongo.org/\" target=\"_blank\" rel=\"external\">RoboMongo</a> client to interact with MongoDB. Alternately I can connect using mongo shell as shown below:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker <span class=\"built_in\">exec</span> -it 2e bash</div><div class=\"line\">mongo</div></pre></td></tr></table></figure></p>\n<p>The output of a successful connection looks like below:<br> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">manju@MANJUTHINK C:\\workspace\\BLOGS</div><div class=\"line\">&gt; docker exec -it 2e bash</div><div class=\"line\">root@2ee14feaa563:/# mongo</div><div class=\"line\">MongoDB shell version: 2.2.7</div><div class=\"line\">connecting to: test</div><div class=\"line\">&gt; show dbs</div><div class=\"line\">local   (empty)</div><div class=\"line\">&gt; use mytest</div><div class=\"line\">switched to db mytest</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure></p>\n<h3 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h3><p>I did the MongoDB for DBA course a local docker server always help me to brush up my knowledge. Sometime soon I will be doing a post comparing SQL and NoSQL syntaxes. </p>\n","excerpt":"","more":"<p>Today, I will show steps to pull a MongoDB docker image and locally running a Mongo database server. I have explained in <a href=\"docker.html\">Docker</a> post the basics and how to configure and run MySQL. </p>\n<h3 id=\"Pulling-the-image\"><a href=\"#Pulling-the-image\" class=\"headerlink\" title=\"Pulling the image\"></a>Pulling the image</h3><p>Once you identified the <a href=\"https://hub.docker.com/_/mongo/\">image</a> , you can bring it to your local machine by issuing the <code>pull</code>.<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker pull mongo:2.2</div></pre></td></tr></table></figure></p>\n<h3 id=\"Starting-the-MongoDB-server\"><a href=\"#Starting-the-MongoDB-server\" class=\"headerlink\" title=\"Starting the MongoDB server\"></a>Starting the MongoDB server</h3><p>It is good to mount a local drive at <code>/data/db</code>, that way DB is available even after server restarts.<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker run --name mongodb -v c:/Users/manju/docker/mongo:/data/db -p 27017:27017 <span class=\"_\">-d</span> mongo:2.2</div></pre></td></tr></table></figure></p>\n<p>If the server is successfully started, you could see the process information by running the <code>ps</code> command. In my case it shows <code>2ee14feaa563</code> is the container ID and it is running for the past 6 seconds.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">manju@MANJUTHINK C:\\workspace\\BLOGS</div><div class=\"line\">&gt; docker ps</div><div class=\"line\">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                      NAMES</div><div class=\"line\">2ee14feaa563        mongo:2.2           &quot;/entrypoint.sh mongo&quot;   18 hours ago        Up 6 seconds        0.0.0.0:27017-&gt;27017/tcp   mongodb</div><div class=\"line\">03076bd7a501        postgres            &quot;/docker-entrypoint.s&quot;   18 hours ago        Up 31 minutes       0.0.0.0:5433-&gt;5432/tcp     pg-server</div><div class=\"line\">93f77fd3a7e6        mysql:5.5           &quot;docker-entrypoint.sh&quot;   3 days ago          Up 41 seconds       0.0.0.0:3306-&gt;3306/tcp     mp-mysql-server</div></pre></td></tr></table></figure></p>\n<h3 id=\"Connecting-to-MongoDB-server\"><a href=\"#Connecting-to-MongoDB-server\" class=\"headerlink\" title=\"Connecting to MongoDB server\"></a>Connecting to MongoDB server</h3><p>I use <a href=\"https://robomongo.org/\">RoboMongo</a> client to interact with MongoDB. Alternately I can connect using mongo shell as shown below:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker <span class=\"built_in\">exec</span> -it 2e bash</div><div class=\"line\">mongo</div></pre></td></tr></table></figure></p>\n<p>The output of a successful connection looks like below:<br> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">manju@MANJUTHINK C:\\workspace\\BLOGS</div><div class=\"line\">&gt; docker exec -it 2e bash</div><div class=\"line\">root@2ee14feaa563:/# mongo</div><div class=\"line\">MongoDB shell version: 2.2.7</div><div class=\"line\">connecting to: test</div><div class=\"line\">&gt; show dbs</div><div class=\"line\">local   (empty)</div><div class=\"line\">&gt; use mytest</div><div class=\"line\">switched to db mytest</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure></p>\n<h3 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h3><p>I did the MongoDB for DBA course a local docker server always help me to brush up my knowledge. Sometime soon I will be doing a post comparing SQL and NoSQL syntaxes. </p>\n"},{"title":"JMeter - Getting started","draft":true,"date":"2016-09-16T14:11:25.000Z","_content":"","source":"_posts/JMeter-Getting-started.md","raw":"---\ntitle: JMeter - Getting started\ndraft: true\ndate: 2016-09-16 10:11:25\ncategories:\n- tools\ntags:\n- jmeter\n- performance\n---\n","slug":"JMeter-Getting-started","published":1,"updated":"2016-09-18T04:02:46.744Z","_id":"cit7fugnp000d7gvbmj3z70kr","comments":1,"layout":"post","photos":[],"link":"","content":"","excerpt":"","more":""},{"title":"SOAPUI - Orchestrating multiple MicroService APIs","draft":true,"date":"2016-09-16T14:10:54.000Z","_content":"\nInternet of MicroServices is the backbone on which IOT stands. Amazon Echo playing music from your album or Camera uploading the photos you take directly to Google Photos etc. When you make an order in Amazon, the ordering system will ask the Inventory system to hold the items, and when payment is made it will ask shipping system to process the shipment. Well, testing this fictitious Amazon servies is not in scope. In this post I will show how SoapUI can be used to orchestrate two dispirate RESTful webservice. \n\n###  The plot\nFind the Congressman in your city. \n\nService 1 : ZipCodeApi.com \n ","source":"_posts/SOAPUI-Orchestrating-multiple-MicroService-APIs.md","raw":"---\ntitle: SOAPUI - Orchestrating multiple MicroService APIs\ndraft: true\ndate: 2016-09-16 10:10:54\ncategories:\n- tools\ntags:\n- REST\n- SoapUI\n---\n\nInternet of MicroServices is the backbone on which IOT stands. Amazon Echo playing music from your album or Camera uploading the photos you take directly to Google Photos etc. When you make an order in Amazon, the ordering system will ask the Inventory system to hold the items, and when payment is made it will ask shipping system to process the shipment. Well, testing this fictitious Amazon servies is not in scope. In this post I will show how SoapUI can be used to orchestrate two dispirate RESTful webservice. \n\n###  The plot\nFind the Congressman in your city. \n\nService 1 : ZipCodeApi.com \n ","slug":"SOAPUI-Orchestrating-multiple-MicroService-APIs","published":1,"updated":"2016-09-19T01:44:21.016Z","_id":"cit7fugns000h7gvbd2zdb04k","comments":1,"layout":"post","photos":[],"link":"","content":"<p>Internet of MicroServices is the backbone on which IOT stands. Amazon Echo playing music from your album or Camera uploading the photos you take directly to Google Photos etc. When you make an order in Amazon, the ordering system will ask the Inventory system to hold the items, and when payment is made it will ask shipping system to process the shipment. Well, testing this fictitious Amazon servies is not in scope. In this post I will show how SoapUI can be used to orchestrate two dispirate RESTful webservice. </p>\n<h3 id=\"The-plot\"><a href=\"#The-plot\" class=\"headerlink\" title=\"The plot\"></a>The plot</h3><p>Find the Congressman in your city. </p>\n<p>Service 1 : ZipCodeApi.com </p>\n","excerpt":"","more":"<p>Internet of MicroServices is the backbone on which IOT stands. Amazon Echo playing music from your album or Camera uploading the photos you take directly to Google Photos etc. When you make an order in Amazon, the ordering system will ask the Inventory system to hold the items, and when payment is made it will ask shipping system to process the shipment. Well, testing this fictitious Amazon servies is not in scope. In this post I will show how SoapUI can be used to orchestrate two dispirate RESTful webservice. </p>\n<h3 id=\"The-plot\"><a href=\"#The-plot\" class=\"headerlink\" title=\"The plot\"></a>The plot</h3><p>Find the Congressman in your city. </p>\n<p>Service 1 : ZipCodeApi.com </p>\n"},{"title":"MongoDB - Aggregation","draft":true,"date":"2016-09-16T14:12:54.000Z","_content":"","source":"_posts/MongoDB-Aggregation.md","raw":"---\ntitle: MongoDB - Aggregation\ndraft: true\ndate: 2016-09-16 10:12:54\ncategories:\n- database\ntags:\n- nosql\n- mongodb\n---\n","slug":"MongoDB-Aggregation","published":1,"updated":"2016-09-18T04:02:46.758Z","_id":"cit7fugnw000k7gvbdgmf5egs","comments":1,"layout":"post","photos":[],"link":"","content":"","excerpt":"","more":""},{"title":"MongoDB - Basic NoSQLs","draft":true,"date":"2016-09-16T14:12:38.000Z","_content":"","source":"_posts/MongoDB-Basic-NoSQLs.md","raw":"---\ntitle: MongoDB - Basic NoSQLs\ndraft: true\ndate: 2016-09-16 10:12:38\ncategories:\n- database\ntags:\n- nosql\n- mongodb\n---\n","slug":"MongoDB-Basic-NoSQLs","published":1,"updated":"2016-09-18T04:02:46.682Z","_id":"cit7fugny000o7gvbv2uyl79h","comments":1,"layout":"post","photos":[],"link":"","content":"","excerpt":"","more":""},{"title":"QAs must be Parents","draft":true,"date":"2016-09-16T14:07:27.000Z","_content":"","source":"_posts/QAs-must-be-Parents.md","raw":"---\ntitle: QAs must be Parents\ndraft: true\ndate: 2016-09-16 10:07:27\ncategories:\n- general\ntags:\n- testing\n---\n","slug":"QAs-must-be-Parents","published":1,"updated":"2016-09-18T04:07:08.023Z","_id":"cit7fugo0000q7gvbr9ujs62v","comments":1,"layout":"post","photos":[],"link":"","content":"","excerpt":"","more":""},{"title":"RESTful API - Basics","date":"2016-04-16T11:14:08.000Z","_content":"A _very minimal_ overview of REST. REST stands for Representational State Transfer. It is an architectural style originally described by Roy Fielding, one of the authors of HTTP 1.0 and 1.1, in a doctoral dissertation at UC Irvine in 2000. \n\n#### Why is REST so famous ? \nTowards the beginning of this decade, a lot of companies started making their applications and services available on Internet. Also, they are moving service APIs which otherwise was protected behind the firewall,to the wilderness of Internet. HTTP being the defacto communication protocol used in Internet, REST that blends well with HTTP has made it a good choice. \n\n#### Concepts\n- URL - Stands for Uniform Resource Locator, for example `http://hilton.com/chantilly/rooms/25`\n- Resource - The information or entity that is identified by a URL, example Room number 25 \n- Representation - How it is represented. JSON, XML or HTML etc, by default RESTful APIs use JSON. \n\nREST vocabulary consists of mainly 4 HTTP actions/verbs, the `GET`, `PUT`, `POST` and `DELETE`. Let us see how they are getting used:\n \n#### GET\n A `GET` request to a URL signify that you need to retrieve the resource. Example `GET http://hilton.com/chantilly/rooms/25` is supposed to respond with a JSON consisting the details of Room 25. \n```json\n{\n    room:\"25\",\n    cost: \"500.50\",\n    beds: \"2\",\n    floor: \"2\",\n    ..........,\n    ..........\n    \n}\n```\nAlternately a `GET` on `rooms` example `GET http://hilton.com/chantilly/rooms/` will return an Array that has details of all the rooms available in the hotel. \n\n### DELETE\n A `DELETE` request to a URL will remove the entity represented by the URL. Example `DELETE http://hilton.com/chantilly/rooms/25` will delete Room 25 from the hotel.\n \n### PUT\n A `PUT` request to a URL will create an entity in the system. The representation of the entity you want to create must be provided in HTTP Request Body. The example below adds Room 25 to the list of available rooms in the hotel. \n ```json\n POST http://hilton.com/chantilly/rooms/\n {\n     room:\"25\",\n     cost: \"500.50\",\n     beds: \"2\",\n     floor: \"2\",\n     ..........,\n     ..........\n     \n }\n ```\n \n### POST\n A `POST` request to a URL will update an entity in the system. The representation of the entity must be provided in HTTP Request Body. The example below updates the number of beds from 2 to 3 in  Room 25 of the hotel.  \n ```json\n POST http://hilton.com/chantilly/rooms/25/\n {\n     room:\"25\",\n     cost: \"500.50\",\n     beds: \"3\",\n     floor: \"2\",\n     ..........,\n     .........., \n }\n ```\n \nIt is quite easy to work and test REST API. To play around you can use public APIs you can find a lot at [Programmable Web](http://www.programmableweb.com/apis). I will shortly post on how SOAPUI can be used to test API published by Weather.com. ","source":"_posts/RESTful-API-Basics.md","raw":"---\ntitle: RESTful API - Basics\ndate: 2016-04-16 07:14:08\ncategories:\n- tools\ntags:\n- REST\n- API\n---\nA _very minimal_ overview of REST. REST stands for Representational State Transfer. It is an architectural style originally described by Roy Fielding, one of the authors of HTTP 1.0 and 1.1, in a doctoral dissertation at UC Irvine in 2000. \n\n#### Why is REST so famous ? \nTowards the beginning of this decade, a lot of companies started making their applications and services available on Internet. Also, they are moving service APIs which otherwise was protected behind the firewall,to the wilderness of Internet. HTTP being the defacto communication protocol used in Internet, REST that blends well with HTTP has made it a good choice. \n\n#### Concepts\n- URL - Stands for Uniform Resource Locator, for example `http://hilton.com/chantilly/rooms/25`\n- Resource - The information or entity that is identified by a URL, example Room number 25 \n- Representation - How it is represented. JSON, XML or HTML etc, by default RESTful APIs use JSON. \n\nREST vocabulary consists of mainly 4 HTTP actions/verbs, the `GET`, `PUT`, `POST` and `DELETE`. Let us see how they are getting used:\n \n#### GET\n A `GET` request to a URL signify that you need to retrieve the resource. Example `GET http://hilton.com/chantilly/rooms/25` is supposed to respond with a JSON consisting the details of Room 25. \n```json\n{\n    room:\"25\",\n    cost: \"500.50\",\n    beds: \"2\",\n    floor: \"2\",\n    ..........,\n    ..........\n    \n}\n```\nAlternately a `GET` on `rooms` example `GET http://hilton.com/chantilly/rooms/` will return an Array that has details of all the rooms available in the hotel. \n\n### DELETE\n A `DELETE` request to a URL will remove the entity represented by the URL. Example `DELETE http://hilton.com/chantilly/rooms/25` will delete Room 25 from the hotel.\n \n### PUT\n A `PUT` request to a URL will create an entity in the system. The representation of the entity you want to create must be provided in HTTP Request Body. The example below adds Room 25 to the list of available rooms in the hotel. \n ```json\n POST http://hilton.com/chantilly/rooms/\n {\n     room:\"25\",\n     cost: \"500.50\",\n     beds: \"2\",\n     floor: \"2\",\n     ..........,\n     ..........\n     \n }\n ```\n \n### POST\n A `POST` request to a URL will update an entity in the system. The representation of the entity must be provided in HTTP Request Body. The example below updates the number of beds from 2 to 3 in  Room 25 of the hotel.  \n ```json\n POST http://hilton.com/chantilly/rooms/25/\n {\n     room:\"25\",\n     cost: \"500.50\",\n     beds: \"3\",\n     floor: \"2\",\n     ..........,\n     .........., \n }\n ```\n \nIt is quite easy to work and test REST API. To play around you can use public APIs you can find a lot at [Programmable Web](http://www.programmableweb.com/apis). I will shortly post on how SOAPUI can be used to test API published by Weather.com. ","slug":"RESTful-API-Basics","published":1,"updated":"2016-09-19T01:30:36.057Z","_id":"cit7fugo2000u7gvb6legnpc8","comments":1,"layout":"post","photos":[],"link":"","content":"<p>A <em>very minimal</em> overview of REST. REST stands for Representational State Transfer. It is an architectural style originally described by Roy Fielding, one of the authors of HTTP 1.0 and 1.1, in a doctoral dissertation at UC Irvine in 2000. </p>\n<h4 id=\"Why-is-REST-so-famous\"><a href=\"#Why-is-REST-so-famous\" class=\"headerlink\" title=\"Why is REST so famous ?\"></a>Why is REST so famous ?</h4><p>Towards the beginning of this decade, a lot of companies started making their applications and services available on Internet. Also, they are moving service APIs which otherwise was protected behind the firewall,to the wilderness of Internet. HTTP being the defacto communication protocol used in Internet, REST that blends well with HTTP has made it a good choice. </p>\n<h4 id=\"Concepts\"><a href=\"#Concepts\" class=\"headerlink\" title=\"Concepts\"></a>Concepts</h4><ul>\n<li>URL - Stands for Uniform Resource Locator, for example <code>http://hilton.com/chantilly/rooms/25</code></li>\n<li>Resource - The information or entity that is identified by a URL, example Room number 25 </li>\n<li>Representation - How it is represented. JSON, XML or HTML etc, by default RESTful APIs use JSON. </li>\n</ul>\n<p>REST vocabulary consists of mainly 4 HTTP actions/verbs, the <code>GET</code>, <code>PUT</code>, <code>POST</code> and <code>DELETE</code>. Let us see how they are getting used:</p>\n<h4 id=\"GET\"><a href=\"#GET\" class=\"headerlink\" title=\"GET\"></a>GET</h4><p> A <code>GET</code> request to a URL signify that you need to retrieve the resource. Example <code>GET http://hilton.com/chantilly/rooms/25</code> is supposed to respond with a JSON consisting the details of Room 25.<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    room:\"25\",</div><div class=\"line\">    cost: \"500.50\",</div><div class=\"line\">    beds: \"2\",</div><div class=\"line\">    floor: \"2\",</div><div class=\"line\">    ..........,</div><div class=\"line\">    ..........</div><div class=\"line\">    </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Alternately a <code>GET</code> on <code>rooms</code> example <code>GET http://hilton.com/chantilly/rooms/</code> will return an Array that has details of all the rooms available in the hotel. </p>\n<h3 id=\"DELETE\"><a href=\"#DELETE\" class=\"headerlink\" title=\"DELETE\"></a>DELETE</h3><p> A <code>DELETE</code> request to a URL will remove the entity represented by the URL. Example <code>DELETE http://hilton.com/chantilly/rooms/25</code> will delete Room 25 from the hotel.</p>\n<h3 id=\"PUT\"><a href=\"#PUT\" class=\"headerlink\" title=\"PUT\"></a>PUT</h3><p> A <code>PUT</code> request to a URL will create an entity in the system. The representation of the entity you want to create must be provided in HTTP Request Body. The example below adds Room 25 to the list of available rooms in the hotel.<br> <figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">POST http://hilton.com/chantilly/rooms/</div><div class=\"line\">&#123;</div><div class=\"line\">    room:\"25\",</div><div class=\"line\">    cost: \"500.50\",</div><div class=\"line\">    beds: \"2\",</div><div class=\"line\">    floor: \"2\",</div><div class=\"line\">    ..........,</div><div class=\"line\">    ..........</div><div class=\"line\">    </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"POST\"><a href=\"#POST\" class=\"headerlink\" title=\"POST\"></a>POST</h3><p> A <code>POST</code> request to a URL will update an entity in the system. The representation of the entity must be provided in HTTP Request Body. The example below updates the number of beds from 2 to 3 in  Room 25 of the hotel.<br> <figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">POST http://hilton.com/chantilly/rooms/25/</div><div class=\"line\">&#123;</div><div class=\"line\">    room:\"25\",</div><div class=\"line\">    cost: \"500.50\",</div><div class=\"line\">    beds: \"3\",</div><div class=\"line\">    floor: \"2\",</div><div class=\"line\">    ..........,</div><div class=\"line\">    .........., </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>It is quite easy to work and test REST API. To play around you can use public APIs you can find a lot at <a href=\"http://www.programmableweb.com/apis\" target=\"_blank\" rel=\"external\">Programmable Web</a>. I will shortly post on how SOAPUI can be used to test API published by Weather.com. </p>\n","excerpt":"","more":"<p>A <em>very minimal</em> overview of REST. REST stands for Representational State Transfer. It is an architectural style originally described by Roy Fielding, one of the authors of HTTP 1.0 and 1.1, in a doctoral dissertation at UC Irvine in 2000. </p>\n<h4 id=\"Why-is-REST-so-famous\"><a href=\"#Why-is-REST-so-famous\" class=\"headerlink\" title=\"Why is REST so famous ?\"></a>Why is REST so famous ?</h4><p>Towards the beginning of this decade, a lot of companies started making their applications and services available on Internet. Also, they are moving service APIs which otherwise was protected behind the firewall,to the wilderness of Internet. HTTP being the defacto communication protocol used in Internet, REST that blends well with HTTP has made it a good choice. </p>\n<h4 id=\"Concepts\"><a href=\"#Concepts\" class=\"headerlink\" title=\"Concepts\"></a>Concepts</h4><ul>\n<li>URL - Stands for Uniform Resource Locator, for example <code>http://hilton.com/chantilly/rooms/25</code></li>\n<li>Resource - The information or entity that is identified by a URL, example Room number 25 </li>\n<li>Representation - How it is represented. JSON, XML or HTML etc, by default RESTful APIs use JSON. </li>\n</ul>\n<p>REST vocabulary consists of mainly 4 HTTP actions/verbs, the <code>GET</code>, <code>PUT</code>, <code>POST</code> and <code>DELETE</code>. Let us see how they are getting used:</p>\n<h4 id=\"GET\"><a href=\"#GET\" class=\"headerlink\" title=\"GET\"></a>GET</h4><p> A <code>GET</code> request to a URL signify that you need to retrieve the resource. Example <code>GET http://hilton.com/chantilly/rooms/25</code> is supposed to respond with a JSON consisting the details of Room 25.<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    room:\"25\",</div><div class=\"line\">    cost: \"500.50\",</div><div class=\"line\">    beds: \"2\",</div><div class=\"line\">    floor: \"2\",</div><div class=\"line\">    ..........,</div><div class=\"line\">    ..........</div><div class=\"line\">    </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Alternately a <code>GET</code> on <code>rooms</code> example <code>GET http://hilton.com/chantilly/rooms/</code> will return an Array that has details of all the rooms available in the hotel. </p>\n<h3 id=\"DELETE\"><a href=\"#DELETE\" class=\"headerlink\" title=\"DELETE\"></a>DELETE</h3><p> A <code>DELETE</code> request to a URL will remove the entity represented by the URL. Example <code>DELETE http://hilton.com/chantilly/rooms/25</code> will delete Room 25 from the hotel.</p>\n<h3 id=\"PUT\"><a href=\"#PUT\" class=\"headerlink\" title=\"PUT\"></a>PUT</h3><p> A <code>PUT</code> request to a URL will create an entity in the system. The representation of the entity you want to create must be provided in HTTP Request Body. The example below adds Room 25 to the list of available rooms in the hotel.<br> <figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">POST http://hilton.com/chantilly/rooms/</div><div class=\"line\">&#123;</div><div class=\"line\">    room:\"25\",</div><div class=\"line\">    cost: \"500.50\",</div><div class=\"line\">    beds: \"2\",</div><div class=\"line\">    floor: \"2\",</div><div class=\"line\">    ..........,</div><div class=\"line\">    ..........</div><div class=\"line\">    </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"POST\"><a href=\"#POST\" class=\"headerlink\" title=\"POST\"></a>POST</h3><p> A <code>POST</code> request to a URL will update an entity in the system. The representation of the entity must be provided in HTTP Request Body. The example below updates the number of beds from 2 to 3 in  Room 25 of the hotel.<br> <figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">POST http://hilton.com/chantilly/rooms/25/</div><div class=\"line\">&#123;</div><div class=\"line\">    room:\"25\",</div><div class=\"line\">    cost: \"500.50\",</div><div class=\"line\">    beds: \"3\",</div><div class=\"line\">    floor: \"2\",</div><div class=\"line\">    ..........,</div><div class=\"line\">    .........., </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>It is quite easy to work and test REST API. To play around you can use public APIs you can find a lot at <a href=\"http://www.programmableweb.com/apis\">Programmable Web</a>. I will shortly post on how SOAPUI can be used to test API published by Weather.com. </p>\n"},{"title":"SQL - Structured Query Language","date":"2015-02-04T03:29:34.000Z","_content":"SQL is a special-purpose programming language designed for managing information in a relational database management system (RDBMS). \nIn this post, I am going to describe few simple entities and demonstrate how SQL can be used to manage those. \n\n**What is a table ?**\nThe data or information in database is stored in these tables. Tables are uniquely identified by their names and are comprised of columns and rows. Columns contain the column name, data type, and any other attributes for the column. Rows contain the records or data for the columns. When we model real-world entities they get represented using Table. \n\nTo start with, let's create a schema that is identical to HR schema published for Oracle. I have ported it into MSQL you can find all the necessary SQLs [here](https://raw.githubusercontent.com/manjupaul/manjupaul.github.io/sources/ref/mysql01/ddl/hr_schema.sql). The entities and the relationship among them are represented in the ER diagram below. I have auto generated that using Toad for MySQL application. \n![](https://raw.githubusercontent.com/manjupaul/manjupaul.github.io/sources/ref/mysql01/imgs/hr-schema.jpg)\n\n**What is a primary key ?**\n A primary key is a field in a table which uniquely identifies each row/record. This puts forward the following restriction on `employee_id` in `employees`:\n  - It cannot be NULL\n  - It should be unique, i.e. you cannot repeat the same primary key value in a table. \n\n**What is a foreign key ?**\n A foreign key is a field in a table that can only contain the value of a primary key in another table. This puts forward the following restrictions on `department_id` in `employees`:\n  - It can be NULL\n  - If it is not NULL, it must contain a value already available in `department_id` field in `departments` table. \n\n\n## SQL Joins\n\nJoins are used to combine rows from multiple tables by specifying matching criteria. Usually, it is based on primary key-foreign key relations.\nFor example, return rows that combine data from  `locations` and `departments` tables by matching the `locations.location_id` primary key to the `departments.location_id` foreign key.\n\nBefore we begin let's look at what is there in `locations`, `departments` and `employees`\n```sql\nmysql> select * from locations limit 3;\n+-------------+-------------------------+-------------+--------+------------------+------------+\n| location_id | street_address          | postal_code | city   | state_province   | country_id |\n+-------------+-------------------------+-------------+--------+------------------+------------+\n|        1000 | 1297 Via Cola di Rie    | 00989       | Roma   | NULL             | IT         |\n|        1100 | 93091 Calle della Testa | 10934       | Venice | NULL             | IT         |\n|        1200 | 2017 Shinjuku-ku        | 1689        | Tokyo  | Tokyo Prefecture | JP         |\n+-------------+-------------------------+-------------+--------+------------------+------------+\n3 rows in set (0.00 sec)\n\nmysql> select * from departments limit 3;\n+---------------+-----------------+------------+-------------+\n| department_id | department_name | manager_id | location_id |\n+---------------+-----------------+------------+-------------+\n|            10 | Administration  |        200 |        1700 |\n|            20 | Marketing       |        201 |        1800 |\n|            30 | Purchasing      |        114 |        1700 |\n+---------------+-----------------+------------+-------------+\n3 rows in set (0.00 sec)\n\n                                                                                                                                                      \nmysql> select * from employees limit 3;                                                                                                               \n+-------------+------------+-----------+----------+--------------+------------+---------+----------+----------------+------------+---------------+    \n| employee_id | first_name | last_name | email    | phone_number | hire_date  | job_id  | salary   | commission_pct | manager_id | department_id |    \n+-------------+------------+-----------+----------+--------------+------------+---------+----------+----------------+------------+---------------+    \n|         100 | Steven     | King      | SKING    | 515.123.4567 | 1987-06-17 | AD_PRES | 24000.00 |           NULL |       NULL |            90 |    \n|         101 | Neena      | Kochhar   | NKOCHHAR | 515.123.4568 | 1989-09-21 | AD_VP   | 17000.00 |           NULL |        100 |            90 |    \n|         102 | Lex        | De Haan   | LDEHAAN  | 515.123.4569 | 1993-01-13 | AD_VP   | 17000.00 |           NULL |        100 |            90 |    \n+-------------+------------+-----------+----------+--------------+------------+---------+----------+----------------+------------+---------------+    \n3 rows in set (0.00 sec)                                                                                                                              \n```\n\nThere are various types of joins, I will go through each one in detail here. \n - Equi Join\n - Self Join\n - Natural Join \n - Inner Join\n - Outer Join\n -- Left Outer Join\n -- Right Outer Join\n -- Full Outer Join \n - Cross Join\n\n### Equi Join\nIn pure SQL terminology any kind of JOIN you do with an equality operator (=) is an equi join. So an outer join, or inner join if is having an equality operator is an equi join, I will show examples of those later. Lets look at a plain vanilla equi join which lists the department and its manager.\n```sql\nmysql>  select d.department_name, l.city, l.state_province,l.country_id\n    ->  from departments d , locations l\n    -> where d.location_id = l.location_id limit 3;\n+-----------------+---------------------+----------------+------------+\n| department_name | city                | state_province | country_id |\n+-----------------+---------------------+----------------+------------+\n| IT              | Southlake           | Texas          | US         |\n| Shipping        | South San Francisco | California     | US         |\n| Administration  | Seattle             | Washington     | US         |\n+-----------------+---------------------+----------------+------------+\n3 rows in set (0.00 sec)\n```\n\n### Self-join\nIf we join the same table then it is called a self-join. In this example, I will list the employees and their managers. \n\n```sql\nmysql> select concat(e.first_name, ' ', e.last_name) as employee , concat(m.first_name, ' ' , m.last_name) as manager\n    ->  from employees e, employees m\n    ->  where e.manager_id = m.employee_id limit 5;\n+------------------+------------------+\n| employee         | manager          |\n+------------------+------------------+\n| Neena Kochhar    | Steven King      |\n| Lex De Haan      | Steven King      |\n| Alexander Hunold | Lex De Haan      |\n| Bruce Ernst      | Alexander Hunold |\n| David Austin     | Alexander Hunold |\n+------------------+------------------+\n5 rows in set (0.00 sec)\n\n```\n\n### Natural Join \nA natural join links all columns in two tables with the same name. It is a short cut notation, in which we are really performing equi join without explicitly mentioning the column name. \n```sql\nmysql> select d.department_name, l.city, l.state_province, l.country_id\n    -> from departments d NATURAL JOIN locations l limit 3;\n+-----------------+---------------------+----------------+------------+\n| department_name | city                | state_province | country_id |\n+-----------------+---------------------+----------------+------------+\n| IT              | Southlake           | Texas          | US         |\n| Shipping        | South San Francisco | California     | US         |\n| Administration  | Seattle             | Washington     | US         |\n+-----------------+---------------------+----------------+------------+\n3 rows in set (0.00 sec)\n```\nThe implementation of natural join in MSQL do not allow you to specify the column name. So it will not yield right results when the matching column names signify slightly different data. \nLet us look back at equi join once again, to list managers of each department by combining `departments` and `employees`. \n```sql\nmysql> select d.department_name, concat(e.first_name, ' ', e.last_name) as manager\n    -> from departments d , employees e\n    -> where d.manager_id = e.employee_id limit 5;\n+-----------------+-------------------+\n| department_name | manager           |\n+-----------------+-------------------+\n| Administration  | Jennifer Whalen   |\n| Marketing       | Michael Hartstein |\n| Purchasing      | Den Raphaely      |\n| Human Resources | Susan Mavris      |\n| Shipping        | Adam Fripp        |\n+-----------------+-------------------+\n5 rows in set (0.00 sec)\n```\nThe same thing with NATURAL JOIN will not give use correct result, as `manager_id` column is there in both `departments` and `employees` table and NATURAL JOIN will pick the column name to join as `manager_id`. \n```sql\n\nmysql> select d.department_name, concat(e.first_name, ' ', e.last_name) as manager\n    -> from departments d NATURAL JOIN employees e limit 5;\n+-----------------+----------------+\n| department_name | manager        |\n+-----------------+----------------+\n| Marketing       | Pat Fay        |\n| Purchasing      | Alexander Khoo |\n| Purchasing      | Shelli Baida   |\n| Purchasing      | Sigal Tobias   |\n| Purchasing      | Guy Himuro     |\n+-----------------+----------------+\n5 rows in set (0.00 sec)\n```\nSo my advice is never to use natural joins as its full syntax is not supported in MySQL and will give erratic results. \n\n### Inner Join\n\nThe inner join is the most common type of joins. An inner join is used to get the cross product between two tables, combining all records from both tables. To get the right result you can use an equi-join or one natural join (column names between tables must be the same). It is the default join also so you can omit the `INNER` keyword. \n\n```sql\nmysql> select d.department_name , concat(e.first_name, ' ' , e.last_name) as manager from departments d\n    -> INNER join employees e on d.manager_id = e.employee_id\n    -> limit 3;\n+-----------------+-------------------+\n| department_name | manager           |\n+-----------------+-------------------+\n| Administration  | Jennifer Whalen   |\n| Marketing       | Michael Hartstein |\n| Purchasing      | Den Raphaely      |\n+-----------------+-------------------+\n3 rows in set (0.00 sec)\n\n-- a variation of the same query is \nmysql> select d.department_name, concat(e.first_name, ' ' , e.last_name) as manager from departments d\n    -> JOIN employees e\n    -> where d.manager_id = e.employee_id\n    -> limit 3;\n+-----------------+-------------------+\n| department_name | manager           |\n+-----------------+-------------------+\n| Administration  | Jennifer Whalen   |\n| Marketing       | Michael Hartstein |\n| Purchasing      | Den Raphaely      |\n+-----------------+-------------------+\n3 rows in set (0.00 sec)\n\n```\n### Left Outer Join\nA left outer join will list all the entries form left side table of an equi join even if there is no match found. For example, in the list below I am displaying all the records from `employees` and if available the departments at which they work.\n\n```sql\nmysql> select e.first_name, e.last_name, d.department_name\n    -> from employees e\n    -> left join departments d on e.department_id = d.department_id\n    -> order by d.department_name asc\n    -> limit 3;\n+------------+-----------+-----------------+\n| first_name | last_name | department_name |\n+------------+-----------+-----------------+\n| Kimberely  | Grant     | NULL            |\n| William    | Gietz     | Accounting      |\n| Shelley    | Higgins   | Accounting      |\n+------------+-----------+-----------------+\n3 rows in set (0.00 sec)\n\n```\nA right outer join will list all the entries form right side table of an equi join even if there is no match found. For example, in the list below I am displaying all the records from departments and if available the employees who work there.\n\n```sql\nmysql> select e.first_name, e.last_name, d.department_name\n    -> from employees e\n    -> right join departments d on d.department_id = e.department_id\n    -> order by d.department_name asc\n    -> limit 5;\n+------------+-----------+-----------------+\n| first_name | last_name | department_name |\n+------------+-----------+-----------------+\n| Shelley    | Higgins   | Accounting      |\n| William    | Gietz     | Accounting      |\n| Jennifer   | Whalen    | Administration  |\n| NULL       | NULL      | Benefits        |\n| NULL       | NULL      | Construction    |\n+------------+-----------+-----------------+\n5 rows in set (0.00 sec)\n```\n### Cross Join\n Cross join will give cartesian product or cross product of the tables.  An inner join without the equality condition is a cross join. The following sqls will give us cross product. \n```sql\nmysql> select d.department_name, concat(e.first_name, ' ' , e.last_name) as manager from departments d, employees e;\nmysql> select d.department_name, concat(e.first_name, ' ' , e.last_name) as manager from departments d cross join employees e;\nmysql> select d.department_name, concat(e.first_name, ' ' , e.last_name) as manager from departments d join employees e;\n```\n","source":"_posts/SQL-Structured-Query-Language.md","raw":"---\ntitle: SQL - Structured Query Language\ndate: 2015-02-03 22:29:34\ncategories:\n- database\ntags:\n- SQL\n---\nSQL is a special-purpose programming language designed for managing information in a relational database management system (RDBMS). \nIn this post, I am going to describe few simple entities and demonstrate how SQL can be used to manage those. \n\n**What is a table ?**\nThe data or information in database is stored in these tables. Tables are uniquely identified by their names and are comprised of columns and rows. Columns contain the column name, data type, and any other attributes for the column. Rows contain the records or data for the columns. When we model real-world entities they get represented using Table. \n\nTo start with, let's create a schema that is identical to HR schema published for Oracle. I have ported it into MSQL you can find all the necessary SQLs [here](https://raw.githubusercontent.com/manjupaul/manjupaul.github.io/sources/ref/mysql01/ddl/hr_schema.sql). The entities and the relationship among them are represented in the ER diagram below. I have auto generated that using Toad for MySQL application. \n![](https://raw.githubusercontent.com/manjupaul/manjupaul.github.io/sources/ref/mysql01/imgs/hr-schema.jpg)\n\n**What is a primary key ?**\n A primary key is a field in a table which uniquely identifies each row/record. This puts forward the following restriction on `employee_id` in `employees`:\n  - It cannot be NULL\n  - It should be unique, i.e. you cannot repeat the same primary key value in a table. \n\n**What is a foreign key ?**\n A foreign key is a field in a table that can only contain the value of a primary key in another table. This puts forward the following restrictions on `department_id` in `employees`:\n  - It can be NULL\n  - If it is not NULL, it must contain a value already available in `department_id` field in `departments` table. \n\n\n## SQL Joins\n\nJoins are used to combine rows from multiple tables by specifying matching criteria. Usually, it is based on primary key-foreign key relations.\nFor example, return rows that combine data from  `locations` and `departments` tables by matching the `locations.location_id` primary key to the `departments.location_id` foreign key.\n\nBefore we begin let's look at what is there in `locations`, `departments` and `employees`\n```sql\nmysql> select * from locations limit 3;\n+-------------+-------------------------+-------------+--------+------------------+------------+\n| location_id | street_address          | postal_code | city   | state_province   | country_id |\n+-------------+-------------------------+-------------+--------+------------------+------------+\n|        1000 | 1297 Via Cola di Rie    | 00989       | Roma   | NULL             | IT         |\n|        1100 | 93091 Calle della Testa | 10934       | Venice | NULL             | IT         |\n|        1200 | 2017 Shinjuku-ku        | 1689        | Tokyo  | Tokyo Prefecture | JP         |\n+-------------+-------------------------+-------------+--------+------------------+------------+\n3 rows in set (0.00 sec)\n\nmysql> select * from departments limit 3;\n+---------------+-----------------+------------+-------------+\n| department_id | department_name | manager_id | location_id |\n+---------------+-----------------+------------+-------------+\n|            10 | Administration  |        200 |        1700 |\n|            20 | Marketing       |        201 |        1800 |\n|            30 | Purchasing      |        114 |        1700 |\n+---------------+-----------------+------------+-------------+\n3 rows in set (0.00 sec)\n\n                                                                                                                                                      \nmysql> select * from employees limit 3;                                                                                                               \n+-------------+------------+-----------+----------+--------------+------------+---------+----------+----------------+------------+---------------+    \n| employee_id | first_name | last_name | email    | phone_number | hire_date  | job_id  | salary   | commission_pct | manager_id | department_id |    \n+-------------+------------+-----------+----------+--------------+------------+---------+----------+----------------+------------+---------------+    \n|         100 | Steven     | King      | SKING    | 515.123.4567 | 1987-06-17 | AD_PRES | 24000.00 |           NULL |       NULL |            90 |    \n|         101 | Neena      | Kochhar   | NKOCHHAR | 515.123.4568 | 1989-09-21 | AD_VP   | 17000.00 |           NULL |        100 |            90 |    \n|         102 | Lex        | De Haan   | LDEHAAN  | 515.123.4569 | 1993-01-13 | AD_VP   | 17000.00 |           NULL |        100 |            90 |    \n+-------------+------------+-----------+----------+--------------+------------+---------+----------+----------------+------------+---------------+    \n3 rows in set (0.00 sec)                                                                                                                              \n```\n\nThere are various types of joins, I will go through each one in detail here. \n - Equi Join\n - Self Join\n - Natural Join \n - Inner Join\n - Outer Join\n -- Left Outer Join\n -- Right Outer Join\n -- Full Outer Join \n - Cross Join\n\n### Equi Join\nIn pure SQL terminology any kind of JOIN you do with an equality operator (=) is an equi join. So an outer join, or inner join if is having an equality operator is an equi join, I will show examples of those later. Lets look at a plain vanilla equi join which lists the department and its manager.\n```sql\nmysql>  select d.department_name, l.city, l.state_province,l.country_id\n    ->  from departments d , locations l\n    -> where d.location_id = l.location_id limit 3;\n+-----------------+---------------------+----------------+------------+\n| department_name | city                | state_province | country_id |\n+-----------------+---------------------+----------------+------------+\n| IT              | Southlake           | Texas          | US         |\n| Shipping        | South San Francisco | California     | US         |\n| Administration  | Seattle             | Washington     | US         |\n+-----------------+---------------------+----------------+------------+\n3 rows in set (0.00 sec)\n```\n\n### Self-join\nIf we join the same table then it is called a self-join. In this example, I will list the employees and their managers. \n\n```sql\nmysql> select concat(e.first_name, ' ', e.last_name) as employee , concat(m.first_name, ' ' , m.last_name) as manager\n    ->  from employees e, employees m\n    ->  where e.manager_id = m.employee_id limit 5;\n+------------------+------------------+\n| employee         | manager          |\n+------------------+------------------+\n| Neena Kochhar    | Steven King      |\n| Lex De Haan      | Steven King      |\n| Alexander Hunold | Lex De Haan      |\n| Bruce Ernst      | Alexander Hunold |\n| David Austin     | Alexander Hunold |\n+------------------+------------------+\n5 rows in set (0.00 sec)\n\n```\n\n### Natural Join \nA natural join links all columns in two tables with the same name. It is a short cut notation, in which we are really performing equi join without explicitly mentioning the column name. \n```sql\nmysql> select d.department_name, l.city, l.state_province, l.country_id\n    -> from departments d NATURAL JOIN locations l limit 3;\n+-----------------+---------------------+----------------+------------+\n| department_name | city                | state_province | country_id |\n+-----------------+---------------------+----------------+------------+\n| IT              | Southlake           | Texas          | US         |\n| Shipping        | South San Francisco | California     | US         |\n| Administration  | Seattle             | Washington     | US         |\n+-----------------+---------------------+----------------+------------+\n3 rows in set (0.00 sec)\n```\nThe implementation of natural join in MSQL do not allow you to specify the column name. So it will not yield right results when the matching column names signify slightly different data. \nLet us look back at equi join once again, to list managers of each department by combining `departments` and `employees`. \n```sql\nmysql> select d.department_name, concat(e.first_name, ' ', e.last_name) as manager\n    -> from departments d , employees e\n    -> where d.manager_id = e.employee_id limit 5;\n+-----------------+-------------------+\n| department_name | manager           |\n+-----------------+-------------------+\n| Administration  | Jennifer Whalen   |\n| Marketing       | Michael Hartstein |\n| Purchasing      | Den Raphaely      |\n| Human Resources | Susan Mavris      |\n| Shipping        | Adam Fripp        |\n+-----------------+-------------------+\n5 rows in set (0.00 sec)\n```\nThe same thing with NATURAL JOIN will not give use correct result, as `manager_id` column is there in both `departments` and `employees` table and NATURAL JOIN will pick the column name to join as `manager_id`. \n```sql\n\nmysql> select d.department_name, concat(e.first_name, ' ', e.last_name) as manager\n    -> from departments d NATURAL JOIN employees e limit 5;\n+-----------------+----------------+\n| department_name | manager        |\n+-----------------+----------------+\n| Marketing       | Pat Fay        |\n| Purchasing      | Alexander Khoo |\n| Purchasing      | Shelli Baida   |\n| Purchasing      | Sigal Tobias   |\n| Purchasing      | Guy Himuro     |\n+-----------------+----------------+\n5 rows in set (0.00 sec)\n```\nSo my advice is never to use natural joins as its full syntax is not supported in MySQL and will give erratic results. \n\n### Inner Join\n\nThe inner join is the most common type of joins. An inner join is used to get the cross product between two tables, combining all records from both tables. To get the right result you can use an equi-join or one natural join (column names between tables must be the same). It is the default join also so you can omit the `INNER` keyword. \n\n```sql\nmysql> select d.department_name , concat(e.first_name, ' ' , e.last_name) as manager from departments d\n    -> INNER join employees e on d.manager_id = e.employee_id\n    -> limit 3;\n+-----------------+-------------------+\n| department_name | manager           |\n+-----------------+-------------------+\n| Administration  | Jennifer Whalen   |\n| Marketing       | Michael Hartstein |\n| Purchasing      | Den Raphaely      |\n+-----------------+-------------------+\n3 rows in set (0.00 sec)\n\n-- a variation of the same query is \nmysql> select d.department_name, concat(e.first_name, ' ' , e.last_name) as manager from departments d\n    -> JOIN employees e\n    -> where d.manager_id = e.employee_id\n    -> limit 3;\n+-----------------+-------------------+\n| department_name | manager           |\n+-----------------+-------------------+\n| Administration  | Jennifer Whalen   |\n| Marketing       | Michael Hartstein |\n| Purchasing      | Den Raphaely      |\n+-----------------+-------------------+\n3 rows in set (0.00 sec)\n\n```\n### Left Outer Join\nA left outer join will list all the entries form left side table of an equi join even if there is no match found. For example, in the list below I am displaying all the records from `employees` and if available the departments at which they work.\n\n```sql\nmysql> select e.first_name, e.last_name, d.department_name\n    -> from employees e\n    -> left join departments d on e.department_id = d.department_id\n    -> order by d.department_name asc\n    -> limit 3;\n+------------+-----------+-----------------+\n| first_name | last_name | department_name |\n+------------+-----------+-----------------+\n| Kimberely  | Grant     | NULL            |\n| William    | Gietz     | Accounting      |\n| Shelley    | Higgins   | Accounting      |\n+------------+-----------+-----------------+\n3 rows in set (0.00 sec)\n\n```\nA right outer join will list all the entries form right side table of an equi join even if there is no match found. For example, in the list below I am displaying all the records from departments and if available the employees who work there.\n\n```sql\nmysql> select e.first_name, e.last_name, d.department_name\n    -> from employees e\n    -> right join departments d on d.department_id = e.department_id\n    -> order by d.department_name asc\n    -> limit 5;\n+------------+-----------+-----------------+\n| first_name | last_name | department_name |\n+------------+-----------+-----------------+\n| Shelley    | Higgins   | Accounting      |\n| William    | Gietz     | Accounting      |\n| Jennifer   | Whalen    | Administration  |\n| NULL       | NULL      | Benefits        |\n| NULL       | NULL      | Construction    |\n+------------+-----------+-----------------+\n5 rows in set (0.00 sec)\n```\n### Cross Join\n Cross join will give cartesian product or cross product of the tables.  An inner join without the equality condition is a cross join. The following sqls will give us cross product. \n```sql\nmysql> select d.department_name, concat(e.first_name, ' ' , e.last_name) as manager from departments d, employees e;\nmysql> select d.department_name, concat(e.first_name, ' ' , e.last_name) as manager from departments d cross join employees e;\nmysql> select d.department_name, concat(e.first_name, ' ' , e.last_name) as manager from departments d join employees e;\n```\n","slug":"SQL-Structured-Query-Language","published":1,"updated":"2016-09-18T04:04:49.224Z","_id":"cit7fugo4000w7gvbdcyxd6wu","comments":1,"layout":"post","photos":[],"link":"","content":"<p>SQL is a special-purpose programming language designed for managing information in a relational database management system (RDBMS).<br>In this post, I am going to describe few simple entities and demonstrate how SQL can be used to manage those. </p>\n<p><strong>What is a table ?</strong><br>The data or information in database is stored in these tables. Tables are uniquely identified by their names and are comprised of columns and rows. Columns contain the column name, data type, and any other attributes for the column. Rows contain the records or data for the columns. When we model real-world entities they get represented using Table. </p>\n<p>To start with, let’s create a schema that is identical to HR schema published for Oracle. I have ported it into MSQL you can find all the necessary SQLs <a href=\"https://raw.githubusercontent.com/manjupaul/manjupaul.github.io/sources/ref/mysql01/ddl/hr_schema.sql\" target=\"_blank\" rel=\"external\">here</a>. The entities and the relationship among them are represented in the ER diagram below. I have auto generated that using Toad for MySQL application.<br><img src=\"https://raw.githubusercontent.com/manjupaul/manjupaul.github.io/sources/ref/mysql01/imgs/hr-schema.jpg\" alt=\"\"></p>\n<p><strong>What is a primary key ?</strong><br> A primary key is a field in a table which uniquely identifies each row/record. This puts forward the following restriction on <code>employee_id</code> in <code>employees</code>:</p>\n<ul>\n<li>It cannot be NULL</li>\n<li>It should be unique, i.e. you cannot repeat the same primary key value in a table. </li>\n</ul>\n<p><strong>What is a foreign key ?</strong><br> A foreign key is a field in a table that can only contain the value of a primary key in another table. This puts forward the following restrictions on <code>department_id</code> in <code>employees</code>:</p>\n<ul>\n<li>It can be NULL</li>\n<li>If it is not NULL, it must contain a value already available in <code>department_id</code> field in <code>departments</code> table. </li>\n</ul>\n<h2 id=\"SQL-Joins\"><a href=\"#SQL-Joins\" class=\"headerlink\" title=\"SQL Joins\"></a>SQL Joins</h2><p>Joins are used to combine rows from multiple tables by specifying matching criteria. Usually, it is based on primary key-foreign key relations.<br>For example, return rows that combine data from  <code>locations</code> and <code>departments</code> tables by matching the <code>locations.location_id</code> primary key to the <code>departments.location_id</code> foreign key.</p>\n<p>Before we begin let’s look at what is there in <code>locations</code>, <code>departments</code> and <code>employees</code><br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\">mysql&gt; select * from locations limit 3;</div><div class=\"line\">+-------------+-------------------------+-------------+--------+------------------+------------+</div><div class=\"line\">| location_id | street_address          | postal_code | city   | state_province   | country_id |</div><div class=\"line\">+-------------+-------------------------+-------------+--------+------------------+------------+</div><div class=\"line\">|        1000 | 1297 Via Cola di Rie    | 00989       | Roma   | NULL             | IT         |</div><div class=\"line\">|        1100 | 93091 Calle della Testa | 10934       | Venice | NULL             | IT         |</div><div class=\"line\">|        1200 | 2017 Shinjuku-ku        | 1689        | Tokyo  | Tokyo Prefecture | JP         |</div><div class=\"line\">+-------------+-------------------------+-------------+--------+------------------+------------+</div><div class=\"line\">3 rows in set (0.00 sec)</div><div class=\"line\"></div><div class=\"line\">mysql&gt; select * from departments limit 3;</div><div class=\"line\">+---------------+-----------------+------------+-------------+</div><div class=\"line\">| department_id | department_name | manager_id | location_id |</div><div class=\"line\">+---------------+-----------------+------------+-------------+</div><div class=\"line\">|            10 | Administration  |        200 |        1700 |</div><div class=\"line\">|            20 | Marketing       |        201 |        1800 |</div><div class=\"line\">|            30 | Purchasing      |        114 |        1700 |</div><div class=\"line\">+---------------+-----------------+------------+-------------+</div><div class=\"line\">3 rows in set (0.00 sec)</div><div class=\"line\"></div><div class=\"line\">                                                                                                                                                      </div><div class=\"line\">mysql&gt; select * from employees limit 3;                                                                                                               </div><div class=\"line\">+-------------+------------+-----------+----------+--------------+------------+---------+----------+----------------+------------+---------------+    </div><div class=\"line\">| employee_id | first_name | last_name | email    | phone_number | hire_date  | job_id  | salary   | commission_pct | manager_id | department_id |    </div><div class=\"line\">+-------------+------------+-----------+----------+--------------+------------+---------+----------+----------------+------------+---------------+    </div><div class=\"line\">|         100 | Steven     | King      | SKING    | 515.123.4567 | 1987-06-17 | AD_PRES | 24000.00 |           NULL |       NULL |            90 |    </div><div class=\"line\">|         101 | Neena      | Kochhar   | NKOCHHAR | 515.123.4568 | 1989-09-21 | AD_VP   | 17000.00 |           NULL |        100 |            90 |    </div><div class=\"line\">|         102 | Lex        | De Haan   | LDEHAAN  | 515.123.4569 | 1993-01-13 | AD_VP   | 17000.00 |           NULL |        100 |            90 |    </div><div class=\"line\">+-------------+------------+-----------+----------+--------------+------------+---------+----------+----------------+------------+---------------+    </div><div class=\"line\">3 rows in set (0.00 sec)</div></pre></td></tr></table></figure></p>\n<p>There are various types of joins, I will go through each one in detail here. </p>\n<ul>\n<li>Equi Join</li>\n<li>Self Join</li>\n<li>Natural Join </li>\n<li>Inner Join</li>\n<li>Outer Join<br>– Left Outer Join<br>– Right Outer Join<br>– Full Outer Join </li>\n<li>Cross Join</li>\n</ul>\n<h3 id=\"Equi-Join\"><a href=\"#Equi-Join\" class=\"headerlink\" title=\"Equi Join\"></a>Equi Join</h3><p>In pure SQL terminology any kind of JOIN you do with an equality operator (=) is an equi join. So an outer join, or inner join if is having an equality operator is an equi join, I will show examples of those later. Lets look at a plain vanilla equi join which lists the department and its manager.<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">mysql&gt;  select d.department_name, l.city, l.state_province,l.country_id</div><div class=\"line\">    -&gt;  from departments d , locations l</div><div class=\"line\">    -&gt; where d.location_id = l.location_id limit 3;</div><div class=\"line\">+-----------------+---------------------+----------------+------------+</div><div class=\"line\">| department_name | city                | state_province | country_id |</div><div class=\"line\">+-----------------+---------------------+----------------+------------+</div><div class=\"line\">| IT              | Southlake           | Texas          | US         |</div><div class=\"line\">| Shipping        | South San Francisco | California     | US         |</div><div class=\"line\">| Administration  | Seattle             | Washington     | US         |</div><div class=\"line\">+-----------------+---------------------+----------------+------------+</div><div class=\"line\">3 rows in set (0.00 sec)</div></pre></td></tr></table></figure></p>\n<h3 id=\"Self-join\"><a href=\"#Self-join\" class=\"headerlink\" title=\"Self-join\"></a>Self-join</h3><p>If we join the same table then it is called a self-join. In this example, I will list the employees and their managers. </p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">mysql&gt; select concat(e.first_name, ' ', e.last_name) as employee , concat(m.first_name, ' ' , m.last_name) as manager</div><div class=\"line\">    -&gt;  from employees e, employees m</div><div class=\"line\">    -&gt;  where e.manager_id = m.employee_id limit 5;</div><div class=\"line\">+------------------+------------------+</div><div class=\"line\">| employee         | manager          |</div><div class=\"line\">+------------------+------------------+</div><div class=\"line\">| Neena Kochhar    | Steven King      |</div><div class=\"line\">| Lex De Haan      | Steven King      |</div><div class=\"line\">| Alexander Hunold | Lex De Haan      |</div><div class=\"line\">| Bruce Ernst      | Alexander Hunold |</div><div class=\"line\">| David Austin     | Alexander Hunold |</div><div class=\"line\">+------------------+------------------+</div><div class=\"line\">5 rows in set (0.00 sec)</div></pre></td></tr></table></figure>\n<h3 id=\"Natural-Join\"><a href=\"#Natural-Join\" class=\"headerlink\" title=\"Natural Join\"></a>Natural Join</h3><p>A natural join links all columns in two tables with the same name. It is a short cut notation, in which we are really performing equi join without explicitly mentioning the column name.<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">mysql&gt; select d.department_name, l.city, l.state_province, l.country_id</div><div class=\"line\">    -&gt; from departments d NATURAL JOIN locations l limit 3;</div><div class=\"line\">+-----------------+---------------------+----------------+------------+</div><div class=\"line\">| department_name | city                | state_province | country_id |</div><div class=\"line\">+-----------------+---------------------+----------------+------------+</div><div class=\"line\">| IT              | Southlake           | Texas          | US         |</div><div class=\"line\">| Shipping        | South San Francisco | California     | US         |</div><div class=\"line\">| Administration  | Seattle             | Washington     | US         |</div><div class=\"line\">+-----------------+---------------------+----------------+------------+</div><div class=\"line\">3 rows in set (0.00 sec)</div></pre></td></tr></table></figure></p>\n<p>The implementation of natural join in MSQL do not allow you to specify the column name. So it will not yield right results when the matching column names signify slightly different data.<br>Let us look back at equi join once again, to list managers of each department by combining <code>departments</code> and <code>employees</code>.<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">mysql&gt; select d.department_name, concat(e.first_name, ' ', e.last_name) as manager</div><div class=\"line\">    -&gt; from departments d , employees e</div><div class=\"line\">    -&gt; where d.manager_id = e.employee_id limit 5;</div><div class=\"line\">+-----------------+-------------------+</div><div class=\"line\">| department_name | manager           |</div><div class=\"line\">+-----------------+-------------------+</div><div class=\"line\">| Administration  | Jennifer Whalen   |</div><div class=\"line\">| Marketing       | Michael Hartstein |</div><div class=\"line\">| Purchasing      | Den Raphaely      |</div><div class=\"line\">| Human Resources | Susan Mavris      |</div><div class=\"line\">| Shipping        | Adam Fripp        |</div><div class=\"line\">+-----------------+-------------------+</div><div class=\"line\">5 rows in set (0.00 sec)</div></pre></td></tr></table></figure></p>\n<p>The same thing with NATURAL JOIN will not give use correct result, as <code>manager_id</code> column is there in both <code>departments</code> and <code>employees</code> table and NATURAL JOIN will pick the column name to join as <code>manager_id</code>.<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">mysql&gt; select d.department_name, concat(e.first_name, ' ', e.last_name) as manager</div><div class=\"line\">    -&gt; from departments d NATURAL JOIN employees e limit 5;</div><div class=\"line\">+-----------------+----------------+</div><div class=\"line\">| department_name | manager        |</div><div class=\"line\">+-----------------+----------------+</div><div class=\"line\">| Marketing       | Pat Fay        |</div><div class=\"line\">| Purchasing      | Alexander Khoo |</div><div class=\"line\">| Purchasing      | Shelli Baida   |</div><div class=\"line\">| Purchasing      | Sigal Tobias   |</div><div class=\"line\">| Purchasing      | Guy Himuro     |</div><div class=\"line\">+-----------------+----------------+</div><div class=\"line\">5 rows in set (0.00 sec)</div></pre></td></tr></table></figure></p>\n<p>So my advice is never to use natural joins as its full syntax is not supported in MySQL and will give erratic results. </p>\n<h3 id=\"Inner-Join\"><a href=\"#Inner-Join\" class=\"headerlink\" title=\"Inner Join\"></a>Inner Join</h3><p>The inner join is the most common type of joins. An inner join is used to get the cross product between two tables, combining all records from both tables. To get the right result you can use an equi-join or one natural join (column names between tables must be the same). It is the default join also so you can omit the <code>INNER</code> keyword. </p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">mysql&gt; select d.department_name , concat(e.first_name, ' ' , e.last_name) as manager from departments d</div><div class=\"line\">    -&gt; INNER join employees e on d.manager_id = e.employee_id</div><div class=\"line\">    -&gt; limit 3;</div><div class=\"line\">+-----------------+-------------------+</div><div class=\"line\">| department_name | manager           |</div><div class=\"line\">+-----------------+-------------------+</div><div class=\"line\">| Administration  | Jennifer Whalen   |</div><div class=\"line\">| Marketing       | Michael Hartstein |</div><div class=\"line\">| Purchasing      | Den Raphaely      |</div><div class=\"line\">+-----------------+-------------------+</div><div class=\"line\">3 rows in set (0.00 sec)</div><div class=\"line\"></div><div class=\"line\">-- a variation of the same query is </div><div class=\"line\">mysql&gt; select d.department_name, concat(e.first_name, ' ' , e.last_name) as manager from departments d</div><div class=\"line\">    -&gt; JOIN employees e</div><div class=\"line\">    -&gt; where d.manager_id = e.employee_id</div><div class=\"line\">    -&gt; limit 3;</div><div class=\"line\">+-----------------+-------------------+</div><div class=\"line\">| department_name | manager           |</div><div class=\"line\">+-----------------+-------------------+</div><div class=\"line\">| Administration  | Jennifer Whalen   |</div><div class=\"line\">| Marketing       | Michael Hartstein |</div><div class=\"line\">| Purchasing      | Den Raphaely      |</div><div class=\"line\">+-----------------+-------------------+</div><div class=\"line\">3 rows in set (0.00 sec)</div></pre></td></tr></table></figure>\n<h3 id=\"Left-Outer-Join\"><a href=\"#Left-Outer-Join\" class=\"headerlink\" title=\"Left Outer Join\"></a>Left Outer Join</h3><p>A left outer join will list all the entries form left side table of an equi join even if there is no match found. For example, in the list below I am displaying all the records from <code>employees</code> and if available the departments at which they work.</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">mysql&gt; select e.first_name, e.last_name, d.department_name</div><div class=\"line\">    -&gt; from employees e</div><div class=\"line\">    -&gt; left join departments d on e.department_id = d.department_id</div><div class=\"line\">    -&gt; order by d.department_name asc</div><div class=\"line\">    -&gt; limit 3;</div><div class=\"line\">+------------+-----------+-----------------+</div><div class=\"line\">| first_name | last_name | department_name |</div><div class=\"line\">+------------+-----------+-----------------+</div><div class=\"line\">| Kimberely  | Grant     | NULL            |</div><div class=\"line\">| William    | Gietz     | Accounting      |</div><div class=\"line\">| Shelley    | Higgins   | Accounting      |</div><div class=\"line\">+------------+-----------+-----------------+</div><div class=\"line\">3 rows in set (0.00 sec)</div></pre></td></tr></table></figure>\n<p>A right outer join will list all the entries form right side table of an equi join even if there is no match found. For example, in the list below I am displaying all the records from departments and if available the employees who work there.</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">mysql&gt; select e.first_name, e.last_name, d.department_name</div><div class=\"line\">    -&gt; from employees e</div><div class=\"line\">    -&gt; right join departments d on d.department_id = e.department_id</div><div class=\"line\">    -&gt; order by d.department_name asc</div><div class=\"line\">    -&gt; limit 5;</div><div class=\"line\">+------------+-----------+-----------------+</div><div class=\"line\">| first_name | last_name | department_name |</div><div class=\"line\">+------------+-----------+-----------------+</div><div class=\"line\">| Shelley    | Higgins   | Accounting      |</div><div class=\"line\">| William    | Gietz     | Accounting      |</div><div class=\"line\">| Jennifer   | Whalen    | Administration  |</div><div class=\"line\">| NULL       | NULL      | Benefits        |</div><div class=\"line\">| NULL       | NULL      | Construction    |</div><div class=\"line\">+------------+-----------+-----------------+</div><div class=\"line\">5 rows in set (0.00 sec)</div></pre></td></tr></table></figure>\n<h3 id=\"Cross-Join\"><a href=\"#Cross-Join\" class=\"headerlink\" title=\"Cross Join\"></a>Cross Join</h3><p> Cross join will give cartesian product or cross product of the tables.  An inner join without the equality condition is a cross join. The following sqls will give us cross product.<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">mysql&gt; select d.department_name, concat(e.first_name, ' ' , e.last_name) as manager from departments d, employees e;</div><div class=\"line\">mysql&gt; select d.department_name, concat(e.first_name, ' ' , e.last_name) as manager from departments d cross join employees e;</div><div class=\"line\">mysql&gt; select d.department_name, concat(e.first_name, ' ' , e.last_name) as manager from departments d join employees e;</div></pre></td></tr></table></figure></p>\n","excerpt":"","more":"<p>SQL is a special-purpose programming language designed for managing information in a relational database management system (RDBMS).<br>In this post, I am going to describe few simple entities and demonstrate how SQL can be used to manage those. </p>\n<p><strong>What is a table ?</strong><br>The data or information in database is stored in these tables. Tables are uniquely identified by their names and are comprised of columns and rows. Columns contain the column name, data type, and any other attributes for the column. Rows contain the records or data for the columns. When we model real-world entities they get represented using Table. </p>\n<p>To start with, let’s create a schema that is identical to HR schema published for Oracle. I have ported it into MSQL you can find all the necessary SQLs <a href=\"https://raw.githubusercontent.com/manjupaul/manjupaul.github.io/sources/ref/mysql01/ddl/hr_schema.sql\">here</a>. The entities and the relationship among them are represented in the ER diagram below. I have auto generated that using Toad for MySQL application.<br><img src=\"https://raw.githubusercontent.com/manjupaul/manjupaul.github.io/sources/ref/mysql01/imgs/hr-schema.jpg\" alt=\"\"></p>\n<p><strong>What is a primary key ?</strong><br> A primary key is a field in a table which uniquely identifies each row/record. This puts forward the following restriction on <code>employee_id</code> in <code>employees</code>:</p>\n<ul>\n<li>It cannot be NULL</li>\n<li>It should be unique, i.e. you cannot repeat the same primary key value in a table. </li>\n</ul>\n<p><strong>What is a foreign key ?</strong><br> A foreign key is a field in a table that can only contain the value of a primary key in another table. This puts forward the following restrictions on <code>department_id</code> in <code>employees</code>:</p>\n<ul>\n<li>It can be NULL</li>\n<li>If it is not NULL, it must contain a value already available in <code>department_id</code> field in <code>departments</code> table. </li>\n</ul>\n<h2 id=\"SQL-Joins\"><a href=\"#SQL-Joins\" class=\"headerlink\" title=\"SQL Joins\"></a>SQL Joins</h2><p>Joins are used to combine rows from multiple tables by specifying matching criteria. Usually, it is based on primary key-foreign key relations.<br>For example, return rows that combine data from  <code>locations</code> and <code>departments</code> tables by matching the <code>locations.location_id</code> primary key to the <code>departments.location_id</code> foreign key.</p>\n<p>Before we begin let’s look at what is there in <code>locations</code>, <code>departments</code> and <code>employees</code><br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\">mysql&gt; select * from locations limit 3;</div><div class=\"line\">+-------------+-------------------------+-------------+--------+------------------+------------+</div><div class=\"line\">| location_id | street_address          | postal_code | city   | state_province   | country_id |</div><div class=\"line\">+-------------+-------------------------+-------------+--------+------------------+------------+</div><div class=\"line\">|        1000 | 1297 Via Cola di Rie    | 00989       | Roma   | NULL             | IT         |</div><div class=\"line\">|        1100 | 93091 Calle della Testa | 10934       | Venice | NULL             | IT         |</div><div class=\"line\">|        1200 | 2017 Shinjuku-ku        | 1689        | Tokyo  | Tokyo Prefecture | JP         |</div><div class=\"line\">+-------------+-------------------------+-------------+--------+------------------+------------+</div><div class=\"line\">3 rows in set (0.00 sec)</div><div class=\"line\"></div><div class=\"line\">mysql&gt; select * from departments limit 3;</div><div class=\"line\">+---------------+-----------------+------------+-------------+</div><div class=\"line\">| department_id | department_name | manager_id | location_id |</div><div class=\"line\">+---------------+-----------------+------------+-------------+</div><div class=\"line\">|            10 | Administration  |        200 |        1700 |</div><div class=\"line\">|            20 | Marketing       |        201 |        1800 |</div><div class=\"line\">|            30 | Purchasing      |        114 |        1700 |</div><div class=\"line\">+---------------+-----------------+------------+-------------+</div><div class=\"line\">3 rows in set (0.00 sec)</div><div class=\"line\"></div><div class=\"line\">                                                                                                                                                      </div><div class=\"line\">mysql&gt; select * from employees limit 3;                                                                                                               </div><div class=\"line\">+-------------+------------+-----------+----------+--------------+------------+---------+----------+----------------+------------+---------------+    </div><div class=\"line\">| employee_id | first_name | last_name | email    | phone_number | hire_date  | job_id  | salary   | commission_pct | manager_id | department_id |    </div><div class=\"line\">+-------------+------------+-----------+----------+--------------+------------+---------+----------+----------------+------------+---------------+    </div><div class=\"line\">|         100 | Steven     | King      | SKING    | 515.123.4567 | 1987-06-17 | AD_PRES | 24000.00 |           NULL |       NULL |            90 |    </div><div class=\"line\">|         101 | Neena      | Kochhar   | NKOCHHAR | 515.123.4568 | 1989-09-21 | AD_VP   | 17000.00 |           NULL |        100 |            90 |    </div><div class=\"line\">|         102 | Lex        | De Haan   | LDEHAAN  | 515.123.4569 | 1993-01-13 | AD_VP   | 17000.00 |           NULL |        100 |            90 |    </div><div class=\"line\">+-------------+------------+-----------+----------+--------------+------------+---------+----------+----------------+------------+---------------+    </div><div class=\"line\">3 rows in set (0.00 sec)</div></pre></td></tr></table></figure></p>\n<p>There are various types of joins, I will go through each one in detail here. </p>\n<ul>\n<li>Equi Join</li>\n<li>Self Join</li>\n<li>Natural Join </li>\n<li>Inner Join</li>\n<li>Outer Join<br>– Left Outer Join<br>– Right Outer Join<br>– Full Outer Join </li>\n<li>Cross Join</li>\n</ul>\n<h3 id=\"Equi-Join\"><a href=\"#Equi-Join\" class=\"headerlink\" title=\"Equi Join\"></a>Equi Join</h3><p>In pure SQL terminology any kind of JOIN you do with an equality operator (=) is an equi join. So an outer join, or inner join if is having an equality operator is an equi join, I will show examples of those later. Lets look at a plain vanilla equi join which lists the department and its manager.<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">mysql&gt;  select d.department_name, l.city, l.state_province,l.country_id</div><div class=\"line\">    -&gt;  from departments d , locations l</div><div class=\"line\">    -&gt; where d.location_id = l.location_id limit 3;</div><div class=\"line\">+-----------------+---------------------+----------------+------------+</div><div class=\"line\">| department_name | city                | state_province | country_id |</div><div class=\"line\">+-----------------+---------------------+----------------+------------+</div><div class=\"line\">| IT              | Southlake           | Texas          | US         |</div><div class=\"line\">| Shipping        | South San Francisco | California     | US         |</div><div class=\"line\">| Administration  | Seattle             | Washington     | US         |</div><div class=\"line\">+-----------------+---------------------+----------------+------------+</div><div class=\"line\">3 rows in set (0.00 sec)</div></pre></td></tr></table></figure></p>\n<h3 id=\"Self-join\"><a href=\"#Self-join\" class=\"headerlink\" title=\"Self-join\"></a>Self-join</h3><p>If we join the same table then it is called a self-join. In this example, I will list the employees and their managers. </p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">mysql&gt; select concat(e.first_name, ' ', e.last_name) as employee , concat(m.first_name, ' ' , m.last_name) as manager</div><div class=\"line\">    -&gt;  from employees e, employees m</div><div class=\"line\">    -&gt;  where e.manager_id = m.employee_id limit 5;</div><div class=\"line\">+------------------+------------------+</div><div class=\"line\">| employee         | manager          |</div><div class=\"line\">+------------------+------------------+</div><div class=\"line\">| Neena Kochhar    | Steven King      |</div><div class=\"line\">| Lex De Haan      | Steven King      |</div><div class=\"line\">| Alexander Hunold | Lex De Haan      |</div><div class=\"line\">| Bruce Ernst      | Alexander Hunold |</div><div class=\"line\">| David Austin     | Alexander Hunold |</div><div class=\"line\">+------------------+------------------+</div><div class=\"line\">5 rows in set (0.00 sec)</div></pre></td></tr></table></figure>\n<h3 id=\"Natural-Join\"><a href=\"#Natural-Join\" class=\"headerlink\" title=\"Natural Join\"></a>Natural Join</h3><p>A natural join links all columns in two tables with the same name. It is a short cut notation, in which we are really performing equi join without explicitly mentioning the column name.<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">mysql&gt; select d.department_name, l.city, l.state_province, l.country_id</div><div class=\"line\">    -&gt; from departments d NATURAL JOIN locations l limit 3;</div><div class=\"line\">+-----------------+---------------------+----------------+------------+</div><div class=\"line\">| department_name | city                | state_province | country_id |</div><div class=\"line\">+-----------------+---------------------+----------------+------------+</div><div class=\"line\">| IT              | Southlake           | Texas          | US         |</div><div class=\"line\">| Shipping        | South San Francisco | California     | US         |</div><div class=\"line\">| Administration  | Seattle             | Washington     | US         |</div><div class=\"line\">+-----------------+---------------------+----------------+------------+</div><div class=\"line\">3 rows in set (0.00 sec)</div></pre></td></tr></table></figure></p>\n<p>The implementation of natural join in MSQL do not allow you to specify the column name. So it will not yield right results when the matching column names signify slightly different data.<br>Let us look back at equi join once again, to list managers of each department by combining <code>departments</code> and <code>employees</code>.<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">mysql&gt; select d.department_name, concat(e.first_name, ' ', e.last_name) as manager</div><div class=\"line\">    -&gt; from departments d , employees e</div><div class=\"line\">    -&gt; where d.manager_id = e.employee_id limit 5;</div><div class=\"line\">+-----------------+-------------------+</div><div class=\"line\">| department_name | manager           |</div><div class=\"line\">+-----------------+-------------------+</div><div class=\"line\">| Administration  | Jennifer Whalen   |</div><div class=\"line\">| Marketing       | Michael Hartstein |</div><div class=\"line\">| Purchasing      | Den Raphaely      |</div><div class=\"line\">| Human Resources | Susan Mavris      |</div><div class=\"line\">| Shipping        | Adam Fripp        |</div><div class=\"line\">+-----------------+-------------------+</div><div class=\"line\">5 rows in set (0.00 sec)</div></pre></td></tr></table></figure></p>\n<p>The same thing with NATURAL JOIN will not give use correct result, as <code>manager_id</code> column is there in both <code>departments</code> and <code>employees</code> table and NATURAL JOIN will pick the column name to join as <code>manager_id</code>.<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">mysql&gt; select d.department_name, concat(e.first_name, ' ', e.last_name) as manager</div><div class=\"line\">    -&gt; from departments d NATURAL JOIN employees e limit 5;</div><div class=\"line\">+-----------------+----------------+</div><div class=\"line\">| department_name | manager        |</div><div class=\"line\">+-----------------+----------------+</div><div class=\"line\">| Marketing       | Pat Fay        |</div><div class=\"line\">| Purchasing      | Alexander Khoo |</div><div class=\"line\">| Purchasing      | Shelli Baida   |</div><div class=\"line\">| Purchasing      | Sigal Tobias   |</div><div class=\"line\">| Purchasing      | Guy Himuro     |</div><div class=\"line\">+-----------------+----------------+</div><div class=\"line\">5 rows in set (0.00 sec)</div></pre></td></tr></table></figure></p>\n<p>So my advice is never to use natural joins as its full syntax is not supported in MySQL and will give erratic results. </p>\n<h3 id=\"Inner-Join\"><a href=\"#Inner-Join\" class=\"headerlink\" title=\"Inner Join\"></a>Inner Join</h3><p>The inner join is the most common type of joins. An inner join is used to get the cross product between two tables, combining all records from both tables. To get the right result you can use an equi-join or one natural join (column names between tables must be the same). It is the default join also so you can omit the <code>INNER</code> keyword. </p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">mysql&gt; select d.department_name , concat(e.first_name, ' ' , e.last_name) as manager from departments d</div><div class=\"line\">    -&gt; INNER join employees e on d.manager_id = e.employee_id</div><div class=\"line\">    -&gt; limit 3;</div><div class=\"line\">+-----------------+-------------------+</div><div class=\"line\">| department_name | manager           |</div><div class=\"line\">+-----------------+-------------------+</div><div class=\"line\">| Administration  | Jennifer Whalen   |</div><div class=\"line\">| Marketing       | Michael Hartstein |</div><div class=\"line\">| Purchasing      | Den Raphaely      |</div><div class=\"line\">+-----------------+-------------------+</div><div class=\"line\">3 rows in set (0.00 sec)</div><div class=\"line\"></div><div class=\"line\">-- a variation of the same query is </div><div class=\"line\">mysql&gt; select d.department_name, concat(e.first_name, ' ' , e.last_name) as manager from departments d</div><div class=\"line\">    -&gt; JOIN employees e</div><div class=\"line\">    -&gt; where d.manager_id = e.employee_id</div><div class=\"line\">    -&gt; limit 3;</div><div class=\"line\">+-----------------+-------------------+</div><div class=\"line\">| department_name | manager           |</div><div class=\"line\">+-----------------+-------------------+</div><div class=\"line\">| Administration  | Jennifer Whalen   |</div><div class=\"line\">| Marketing       | Michael Hartstein |</div><div class=\"line\">| Purchasing      | Den Raphaely      |</div><div class=\"line\">+-----------------+-------------------+</div><div class=\"line\">3 rows in set (0.00 sec)</div></pre></td></tr></table></figure>\n<h3 id=\"Left-Outer-Join\"><a href=\"#Left-Outer-Join\" class=\"headerlink\" title=\"Left Outer Join\"></a>Left Outer Join</h3><p>A left outer join will list all the entries form left side table of an equi join even if there is no match found. For example, in the list below I am displaying all the records from <code>employees</code> and if available the departments at which they work.</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">mysql&gt; select e.first_name, e.last_name, d.department_name</div><div class=\"line\">    -&gt; from employees e</div><div class=\"line\">    -&gt; left join departments d on e.department_id = d.department_id</div><div class=\"line\">    -&gt; order by d.department_name asc</div><div class=\"line\">    -&gt; limit 3;</div><div class=\"line\">+------------+-----------+-----------------+</div><div class=\"line\">| first_name | last_name | department_name |</div><div class=\"line\">+------------+-----------+-----------------+</div><div class=\"line\">| Kimberely  | Grant     | NULL            |</div><div class=\"line\">| William    | Gietz     | Accounting      |</div><div class=\"line\">| Shelley    | Higgins   | Accounting      |</div><div class=\"line\">+------------+-----------+-----------------+</div><div class=\"line\">3 rows in set (0.00 sec)</div></pre></td></tr></table></figure>\n<p>A right outer join will list all the entries form right side table of an equi join even if there is no match found. For example, in the list below I am displaying all the records from departments and if available the employees who work there.</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">mysql&gt; select e.first_name, e.last_name, d.department_name</div><div class=\"line\">    -&gt; from employees e</div><div class=\"line\">    -&gt; right join departments d on d.department_id = e.department_id</div><div class=\"line\">    -&gt; order by d.department_name asc</div><div class=\"line\">    -&gt; limit 5;</div><div class=\"line\">+------------+-----------+-----------------+</div><div class=\"line\">| first_name | last_name | department_name |</div><div class=\"line\">+------------+-----------+-----------------+</div><div class=\"line\">| Shelley    | Higgins   | Accounting      |</div><div class=\"line\">| William    | Gietz     | Accounting      |</div><div class=\"line\">| Jennifer   | Whalen    | Administration  |</div><div class=\"line\">| NULL       | NULL      | Benefits        |</div><div class=\"line\">| NULL       | NULL      | Construction    |</div><div class=\"line\">+------------+-----------+-----------------+</div><div class=\"line\">5 rows in set (0.00 sec)</div></pre></td></tr></table></figure>\n<h3 id=\"Cross-Join\"><a href=\"#Cross-Join\" class=\"headerlink\" title=\"Cross Join\"></a>Cross Join</h3><p> Cross join will give cartesian product or cross product of the tables.  An inner join without the equality condition is a cross join. The following sqls will give us cross product.<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">mysql&gt; select d.department_name, concat(e.first_name, ' ' , e.last_name) as manager from departments d, employees e;</div><div class=\"line\">mysql&gt; select d.department_name, concat(e.first_name, ' ' , e.last_name) as manager from departments d cross join employees e;</div><div class=\"line\">mysql&gt; select d.department_name, concat(e.first_name, ' ' , e.last_name) as manager from departments d join employees e;</div></pre></td></tr></table></figure></p>\n"},{"title":"SQL Tricks - Date Functions","date":"2016-09-16T14:04:51.000Z","_content":"","source":"_posts/SQL-Tricks-Date-Functions.md","raw":"---\ntitle: SQL Tricks - Date Functions\ndate: 2016-09-16 10:04:51\ncategories:\n- database\ntags:\n- SQL\n---\n","slug":"SQL-Tricks-Date-Functions","published":1,"updated":"2016-09-19T01:31:34.140Z","_id":"cit7fugob00107gvb51m8uvvo","comments":1,"layout":"post","photos":[],"link":"","content":"","excerpt":"","more":""},{"title":"SQL Tricks - Index","date":"2016-09-16T14:05:25.000Z","_content":"","source":"_posts/SQL-Tricks-Indexs.md","raw":"---\ntitle: SQL Tricks - Index\ndate: 2016-09-16 10:05:25\ncategories:\n- database\ntags:\n- SQL\n---\n","slug":"SQL-Tricks-Indexs","published":1,"updated":"2016-09-19T01:31:07.961Z","_id":"cit7fugof00137gvbsu0o2qgo","comments":1,"layout":"post","photos":[],"link":"","content":"","excerpt":"","more":""},{"title":"SQL Tricks - String Functions","date":"2016-09-16T14:05:01.000Z","_content":"","source":"_posts/SQL-Tricks-String-Functions.md","raw":"---\ntitle: SQL Tricks - String Functions\ndate: 2016-09-16 10:05:01\ncategories:\n- database\ntags:\n- SQL\n---\n","slug":"SQL-Tricks-String-Functions","published":1,"updated":"2016-09-19T01:31:07.951Z","_id":"cit7fugoj00177gvbrzt9gt6t","comments":1,"layout":"post","photos":[],"link":"","content":"","excerpt":"","more":""},{"title":"SoapUI - Asserting data in MongoDB collections","draft":true,"date":"2016-09-16T14:13:36.000Z","_content":"","source":"_posts/SoapUI-Asserting-data-in-MongoDB-collections.md","raw":"---\ntitle: SoapUI - Asserting data in MongoDB collections\ndraft: true\ndate: 2016-09-16 10:13:36\ncategories:\n- tools\ntags:\n- REST\n- SoapUI\n---\n","slug":"SoapUI-Asserting-data-in-MongoDB-collections","published":1,"updated":"2016-09-18T04:02:46.698Z","_id":"cit7fugom001a7gvbp86ggqf7","comments":1,"layout":"post","photos":[],"link":"","content":"","excerpt":"","more":""},{"title":"SQL Tricks - Tree Walking","draft":true,"date":"2016-09-16T14:04:16.000Z","_content":"","source":"_posts/SQL-Tricks-Tree-Walking.md","raw":"---\ntitle: SQL Tricks - Tree Walking\ndraft: true\ndate: 2016-09-16 10:04:16\ncategories:\n- database\ntags:\n- SQL\n---\n","slug":"SQL-Tricks-Tree-Walking","published":1,"updated":"2016-09-18T04:05:20.490Z","_id":"cit7fugop001c7gvbe9lxdbmp","comments":1,"layout":"post","photos":[],"link":"","content":"","excerpt":"","more":""},{"title":"Docker","date":"2016-02-14T13:32:40.000Z","_content":"Docker, I am excited!, I am not going to describe what docker is, how it to install it etc. See https://www.docker.com/ for details. Docker is mostly used by software developers and system administrators to quickly setup and manage software or  environment. \n<!-- more -->\n### How to use it\n\nWith Docker, it is very easy to setup a software in your machine. Wow! thanks to DockerHub, there are a lot of ready-made software containers available. You name it, you will find it there. I can experiment without worrying whether my actions corrupt the software. With few simple commands, I can install or uninstall say a database and run it. \n\n### Installing MySQL\nTo begin with, you have to go to https://hub.docker.com/ and search for MySQL. The first search result(https://hub.docker.com/_/mysql/) will take you to the official MySQL server container(s). You can download this prebuilt server by issuing the pull command. \n\n```bash\ndocker pull mysql:5.5\n```\nIn order to start MySQL server, you can run the following command\n```bash\ndocker run --name mp-mysql-server -e MYSQL_ROOT_PASSWORD=root123 -e MYSQL_DATABASE=ems -p 3306:3306 -d -v  C:/Users/manju/docker/mysql:/var/lib/mysql mysql:5.5\n```\n\nThe following command will show the list of running containers. You can obtain the unique identifier for the container from the output.\n\n```bash\ndocker ps\n```\n\nThe following command can be used to SSH into a running container. \n```bash\ndocker exec -it <container-id> bash\n```\n\nTo stop the container you can use the `stop` or `kill` commands. \n```bash\ndocker kill <container-id>\n```\n### How this impacts me\n\nHaving a docker powered environment has a positive effect on my QA workflow. For example, I may be asked to validate the install guide of a web application. I can spin off various versions of PostgreSQL or MySQL and point the application to that. \n","source":"_posts/docker.md","raw":"---\ntitle: Docker\ndate: 2016-02-14 08:32:40\ncategories:\n - database\ntags: \n- docker\n- mysql\n---\nDocker, I am excited!, I am not going to describe what docker is, how it to install it etc. See https://www.docker.com/ for details. Docker is mostly used by software developers and system administrators to quickly setup and manage software or  environment. \n<!-- more -->\n### How to use it\n\nWith Docker, it is very easy to setup a software in your machine. Wow! thanks to DockerHub, there are a lot of ready-made software containers available. You name it, you will find it there. I can experiment without worrying whether my actions corrupt the software. With few simple commands, I can install or uninstall say a database and run it. \n\n### Installing MySQL\nTo begin with, you have to go to https://hub.docker.com/ and search for MySQL. The first search result(https://hub.docker.com/_/mysql/) will take you to the official MySQL server container(s). You can download this prebuilt server by issuing the pull command. \n\n```bash\ndocker pull mysql:5.5\n```\nIn order to start MySQL server, you can run the following command\n```bash\ndocker run --name mp-mysql-server -e MYSQL_ROOT_PASSWORD=root123 -e MYSQL_DATABASE=ems -p 3306:3306 -d -v  C:/Users/manju/docker/mysql:/var/lib/mysql mysql:5.5\n```\n\nThe following command will show the list of running containers. You can obtain the unique identifier for the container from the output.\n\n```bash\ndocker ps\n```\n\nThe following command can be used to SSH into a running container. \n```bash\ndocker exec -it <container-id> bash\n```\n\nTo stop the container you can use the `stop` or `kill` commands. \n```bash\ndocker kill <container-id>\n```\n### How this impacts me\n\nHaving a docker powered environment has a positive effect on my QA workflow. For example, I may be asked to validate the install guide of a web application. I can spin off various versions of PostgreSQL or MySQL and point the application to that. \n","slug":"docker","published":1,"updated":"2016-09-18T03:58:12.803Z","_id":"cit7fugor001f7gvblpzcxzmj","comments":1,"layout":"post","photos":[],"link":"","content":"<p>Docker, I am excited!, I am not going to describe what docker is, how it to install it etc. See <a href=\"https://www.docker.com/\" target=\"_blank\" rel=\"external\">https://www.docker.com/</a> for details. Docker is mostly used by software developers and system administrators to quickly setup and manage software or  environment.<br><a id=\"more\"></a></p>\n<h3 id=\"How-to-use-it\"><a href=\"#How-to-use-it\" class=\"headerlink\" title=\"How to use it\"></a>How to use it</h3><p>With Docker, it is very easy to setup a software in your machine. Wow! thanks to DockerHub, there are a lot of ready-made software containers available. You name it, you will find it there. I can experiment without worrying whether my actions corrupt the software. With few simple commands, I can install or uninstall say a database and run it. </p>\n<h3 id=\"Installing-MySQL\"><a href=\"#Installing-MySQL\" class=\"headerlink\" title=\"Installing MySQL\"></a>Installing MySQL</h3><p>To begin with, you have to go to <a href=\"https://hub.docker.com/\" target=\"_blank\" rel=\"external\">https://hub.docker.com/</a> and search for MySQL. The first search result(<a href=\"https://hub.docker.com/_/mysql/\" target=\"_blank\" rel=\"external\">https://hub.docker.com/_/mysql/</a>) will take you to the official MySQL server container(s). You can download this prebuilt server by issuing the pull command. </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker pull mysql:5.5</div></pre></td></tr></table></figure>\n<p>In order to start MySQL server, you can run the following command<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker run --name mp-mysql-server <span class=\"_\">-e</span> MYSQL_ROOT_PASSWORD=root123 <span class=\"_\">-e</span> MYSQL_DATABASE=ems -p 3306:3306 <span class=\"_\">-d</span> -v  C:/Users/manju/docker/mysql:/var/lib/mysql mysql:5.5</div></pre></td></tr></table></figure></p>\n<p>The following command will show the list of running containers. You can obtain the unique identifier for the container from the output.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker ps</div></pre></td></tr></table></figure>\n<p>The following command can be used to SSH into a running container.<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker <span class=\"built_in\">exec</span> -it &lt;container-id&gt; bash</div></pre></td></tr></table></figure></p>\n<p>To stop the container you can use the <code>stop</code> or <code>kill</code> commands.<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker <span class=\"built_in\">kill</span> &lt;container-id&gt;</div></pre></td></tr></table></figure></p>\n<h3 id=\"How-this-impacts-me\"><a href=\"#How-this-impacts-me\" class=\"headerlink\" title=\"How this impacts me\"></a>How this impacts me</h3><p>Having a docker powered environment has a positive effect on my QA workflow. For example, I may be asked to validate the install guide of a web application. I can spin off various versions of PostgreSQL or MySQL and point the application to that. </p>\n","excerpt":"<p>Docker, I am excited!, I am not going to describe what docker is, how it to install it etc. See <a href=\"https://www.docker.com/\">https://www.docker.com/</a> for details. Docker is mostly used by software developers and system administrators to quickly setup and manage software or  environment.<br>","more":"</p>\n<h3 id=\"How-to-use-it\"><a href=\"#How-to-use-it\" class=\"headerlink\" title=\"How to use it\"></a>How to use it</h3><p>With Docker, it is very easy to setup a software in your machine. Wow! thanks to DockerHub, there are a lot of ready-made software containers available. You name it, you will find it there. I can experiment without worrying whether my actions corrupt the software. With few simple commands, I can install or uninstall say a database and run it. </p>\n<h3 id=\"Installing-MySQL\"><a href=\"#Installing-MySQL\" class=\"headerlink\" title=\"Installing MySQL\"></a>Installing MySQL</h3><p>To begin with, you have to go to <a href=\"https://hub.docker.com/\">https://hub.docker.com/</a> and search for MySQL. The first search result(<a href=\"https://hub.docker.com/_/mysql/\">https://hub.docker.com/_/mysql/</a>) will take you to the official MySQL server container(s). You can download this prebuilt server by issuing the pull command. </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker pull mysql:5.5</div></pre></td></tr></table></figure>\n<p>In order to start MySQL server, you can run the following command<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker run --name mp-mysql-server <span class=\"_\">-e</span> MYSQL_ROOT_PASSWORD=root123 <span class=\"_\">-e</span> MYSQL_DATABASE=ems -p 3306:3306 <span class=\"_\">-d</span> -v  C:/Users/manju/docker/mysql:/var/lib/mysql mysql:5.5</div></pre></td></tr></table></figure></p>\n<p>The following command will show the list of running containers. You can obtain the unique identifier for the container from the output.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker ps</div></pre></td></tr></table></figure>\n<p>The following command can be used to SSH into a running container.<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker <span class=\"built_in\">exec</span> -it &lt;container-id&gt; bash</div></pre></td></tr></table></figure></p>\n<p>To stop the container you can use the <code>stop</code> or <code>kill</code> commands.<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker <span class=\"built_in\">kill</span> &lt;container-id&gt;</div></pre></td></tr></table></figure></p>\n<h3 id=\"How-this-impacts-me\"><a href=\"#How-this-impacts-me\" class=\"headerlink\" title=\"How this impacts me\"></a>How this impacts me</h3><p>Having a docker powered environment has a positive effect on my QA workflow. For example, I may be asked to validate the install guide of a web application. I can spin off various versions of PostgreSQL or MySQL and point the application to that. </p>"},{"title":"How to make Egg Bhurji","date":"2014-11-22T17:39:34.000Z","_content":"Recently I have been searching on the internet on how egg bhurji is made. There are a lot of recipes with scores of variations.\nThe literal translation of \"Egg Bhurji\" is \"Scrambled Eggs\", but I say egg bhurji is just egg bhurji and not \"scrambled eggs\". Here is a recipe, with my tasty variations. Try this out, I am confident that your taste buds will not get disappointed.\n\n{% blockquote Anton Ego, &nbsp; - Ratatouille %} \nIn the past, I have made no secret of my disdain for Chef Gusteau's famous motto, **_\"Anyone can cook.\"_** But I realize, only now do I truly understand what he meant. Not everyone can become a great artist; but a great artist *can* come from *anywhere*. \n{% endblockquote %}\n{% youtube -JPOoFkrh94#t=2m9s %}\n\n### What you need \n - Egg 4 numbers\n - Unsalted butter 50 grams\n - 2 Tomatoes, finely chopped\n - 2 Red Onions, finely chopped\n - 2 Green Chillies chopped\n - Ginger, to taste, chopped\n - Coriander leaves, a handful roughly chopped\n - Black pepper powder, to taste\n - Salt, to taste\n\n\n### How to prepare\n - Take a bowl and whisk well the eggs.\n - Add salt and pepper into the egg bowl, whisk it again. \n - Take pan and place it on medium fire.\n - Put half of the butter into the pan.\n - Add chopped ginger and toss them a bit.\n - Add chopped onions and lightly toss them. \n - From pan transfer the tossed onions and ginger into the egg bowl and whisk the mixture lightly.\n - Add the remaining butter to the pan and let it melt\n - Transfer the egg slowly into the pan while stirring as the egg mixture is poured.  \n - Keep tossing the egg mixture and shake the pan up and down\n - When it is slightly dry add half of the chopped coriander leaves\n - Now turn off the fire, but keep stirring for half a minute. \n - Transfer the bhurji into a bowl and add garnish it by spreading the reminder coriander leaves. \n ![](https://raw.githubusercontent.com/manjupaul/manjupaul.github.io/sources/ref/mysql01/imgs/egg-bhurji.jpg)\n Serve hot, Enjoy!","source":"_posts/How-to-make-Egg-Bhurji.md","raw":"---\ntitle: How to make Egg Bhurji\ndate: 2014-11-22 12:39:34\ncategories:\n- cooking\ntags: \n- egg\n---\nRecently I have been searching on the internet on how egg bhurji is made. There are a lot of recipes with scores of variations.\nThe literal translation of \"Egg Bhurji\" is \"Scrambled Eggs\", but I say egg bhurji is just egg bhurji and not \"scrambled eggs\". Here is a recipe, with my tasty variations. Try this out, I am confident that your taste buds will not get disappointed.\n\n{% blockquote Anton Ego, &nbsp; - Ratatouille %} \nIn the past, I have made no secret of my disdain for Chef Gusteau's famous motto, **_\"Anyone can cook.\"_** But I realize, only now do I truly understand what he meant. Not everyone can become a great artist; but a great artist *can* come from *anywhere*. \n{% endblockquote %}\n{% youtube -JPOoFkrh94#t=2m9s %}\n\n### What you need \n - Egg 4 numbers\n - Unsalted butter 50 grams\n - 2 Tomatoes, finely chopped\n - 2 Red Onions, finely chopped\n - 2 Green Chillies chopped\n - Ginger, to taste, chopped\n - Coriander leaves, a handful roughly chopped\n - Black pepper powder, to taste\n - Salt, to taste\n\n\n### How to prepare\n - Take a bowl and whisk well the eggs.\n - Add salt and pepper into the egg bowl, whisk it again. \n - Take pan and place it on medium fire.\n - Put half of the butter into the pan.\n - Add chopped ginger and toss them a bit.\n - Add chopped onions and lightly toss them. \n - From pan transfer the tossed onions and ginger into the egg bowl and whisk the mixture lightly.\n - Add the remaining butter to the pan and let it melt\n - Transfer the egg slowly into the pan while stirring as the egg mixture is poured.  \n - Keep tossing the egg mixture and shake the pan up and down\n - When it is slightly dry add half of the chopped coriander leaves\n - Now turn off the fire, but keep stirring for half a minute. \n - Transfer the bhurji into a bowl and add garnish it by spreading the reminder coriander leaves. \n ![](https://raw.githubusercontent.com/manjupaul/manjupaul.github.io/sources/ref/mysql01/imgs/egg-bhurji.jpg)\n Serve hot, Enjoy!","slug":"How-to-make-Egg-Bhurji","published":1,"updated":"2016-09-17T17:17:31.252Z","_id":"cit7gg7t300004wvb1iz6z085","comments":1,"layout":"post","photos":[],"link":"","content":"<p>Recently I have been searching on the internet on how egg bhurji is made. There are a lot of recipes with scores of variations.<br>The literal translation of “Egg Bhurji” is “Scrambled Eggs”, but I say egg bhurji is just egg bhurji and not “scrambled eggs”. Here is a recipe, with my tasty variations. Try this out, I am confident that your taste buds will not get disappointed.</p>\n<blockquote><p>In the past, I have made no secret of my disdain for Chef Gusteau’s famous motto, <strong><em>“Anyone can cook.”</em></strong> But I realize, only now do I truly understand what he meant. Not everyone can become a great artist; but a great artist <em>can</em> come from <em>anywhere</em>. </p>\n<footer><strong>Anton Ego</strong><cite>&nbsp; - Ratatouille</cite></footer></blockquote>\n<div class=\"video-container\"><iframe src=\"//www.youtube.com/embed/-JPOoFkrh94#t=2m9s\" frameborder=\"0\" allowfullscreen></iframe></div>\n<h3 id=\"What-you-need\"><a href=\"#What-you-need\" class=\"headerlink\" title=\"What you need\"></a>What you need</h3><ul>\n<li>Egg 4 numbers</li>\n<li>Unsalted butter 50 grams</li>\n<li>2 Tomatoes, finely chopped</li>\n<li>2 Red Onions, finely chopped</li>\n<li>2 Green Chillies chopped</li>\n<li>Ginger, to taste, chopped</li>\n<li>Coriander leaves, a handful roughly chopped</li>\n<li>Black pepper powder, to taste</li>\n<li>Salt, to taste</li>\n</ul>\n<h3 id=\"How-to-prepare\"><a href=\"#How-to-prepare\" class=\"headerlink\" title=\"How to prepare\"></a>How to prepare</h3><ul>\n<li>Take a bowl and whisk well the eggs.</li>\n<li>Add salt and pepper into the egg bowl, whisk it again. </li>\n<li>Take pan and place it on medium fire.</li>\n<li>Put half of the butter into the pan.</li>\n<li>Add chopped ginger and toss them a bit.</li>\n<li>Add chopped onions and lightly toss them. </li>\n<li>From pan transfer the tossed onions and ginger into the egg bowl and whisk the mixture lightly.</li>\n<li>Add the remaining butter to the pan and let it melt</li>\n<li>Transfer the egg slowly into the pan while stirring as the egg mixture is poured.  </li>\n<li>Keep tossing the egg mixture and shake the pan up and down</li>\n<li>When it is slightly dry add half of the chopped coriander leaves</li>\n<li>Now turn off the fire, but keep stirring for half a minute. </li>\n<li>Transfer the bhurji into a bowl and add garnish it by spreading the reminder coriander leaves.<br><img src=\"https://raw.githubusercontent.com/manjupaul/manjupaul.github.io/sources/ref/mysql01/imgs/egg-bhurji.jpg\" alt=\"\"><br>Serve hot, Enjoy!</li>\n</ul>\n","excerpt":"","more":"<p>Recently I have been searching on the internet on how egg bhurji is made. There are a lot of recipes with scores of variations.<br>The literal translation of “Egg Bhurji” is “Scrambled Eggs”, but I say egg bhurji is just egg bhurji and not “scrambled eggs”. Here is a recipe, with my tasty variations. Try this out, I am confident that your taste buds will not get disappointed.</p>\n<blockquote><p>In the past, I have made no secret of my disdain for Chef Gusteau’s famous motto, <strong><em>“Anyone can cook.”</em></strong> But I realize, only now do I truly understand what he meant. Not everyone can become a great artist; but a great artist <em>can</em> come from <em>anywhere</em>. </p>\n<footer><strong>Anton Ego</strong><cite>&nbsp; - Ratatouille</cite></footer></blockquote>\n<div class=\"video-container\"><iframe src=\"//www.youtube.com/embed/-JPOoFkrh94#t=2m9s\" frameborder=\"0\" allowfullscreen></iframe></div>\n<h3 id=\"What-you-need\"><a href=\"#What-you-need\" class=\"headerlink\" title=\"What you need\"></a>What you need</h3><ul>\n<li>Egg 4 numbers</li>\n<li>Unsalted butter 50 grams</li>\n<li>2 Tomatoes, finely chopped</li>\n<li>2 Red Onions, finely chopped</li>\n<li>2 Green Chillies chopped</li>\n<li>Ginger, to taste, chopped</li>\n<li>Coriander leaves, a handful roughly chopped</li>\n<li>Black pepper powder, to taste</li>\n<li>Salt, to taste</li>\n</ul>\n<h3 id=\"How-to-prepare\"><a href=\"#How-to-prepare\" class=\"headerlink\" title=\"How to prepare\"></a>How to prepare</h3><ul>\n<li>Take a bowl and whisk well the eggs.</li>\n<li>Add salt and pepper into the egg bowl, whisk it again. </li>\n<li>Take pan and place it on medium fire.</li>\n<li>Put half of the butter into the pan.</li>\n<li>Add chopped ginger and toss them a bit.</li>\n<li>Add chopped onions and lightly toss them. </li>\n<li>From pan transfer the tossed onions and ginger into the egg bowl and whisk the mixture lightly.</li>\n<li>Add the remaining butter to the pan and let it melt</li>\n<li>Transfer the egg slowly into the pan while stirring as the egg mixture is poured.  </li>\n<li>Keep tossing the egg mixture and shake the pan up and down</li>\n<li>When it is slightly dry add half of the chopped coriander leaves</li>\n<li>Now turn off the fire, but keep stirring for half a minute. </li>\n<li>Transfer the bhurji into a bowl and add garnish it by spreading the reminder coriander leaves.<br><img src=\"https://raw.githubusercontent.com/manjupaul/manjupaul.github.io/sources/ref/mysql01/imgs/egg-bhurji.jpg\" alt=\"\"><br>Serve hot, Enjoy!</li>\n</ul>\n"},{"title":"Docker - PostgreSQL","draft":true,"date":"2016-09-16T14:05:52.000Z","_content":"\nIn this post, I will briefly explain the steps to getup and running PostgreSQL docker image. I have explained in [Docker](docker.html) post the basics and how to configure and run MySQL. \n\n### Identifying the Image\nLet's begin by searching on [DockerHub](https://hub.docker.com/search/?isAutomated=0&isOfficial=0&page=1&pullCount=0&q=postgresql&starCount=0) and pick the official PostgreSQL version. \n```bash\ndocker pull postgresql:9\n```\nIf the pull is successful, you must see `postgresql` in the list of docker images. \n```\nmanju@MANJUTHINK C:\\workspace\\BLOGS\n> docker images\nREPOSITORY          TAG                 IMAGE ID            CREATED             SIZE\nmysql               5.5                 89f8142697a0        10 days ago         255.8 MB\nmongo               latest              48b8b08dca4d        2 weeks ago         366.4 MB\npostgres            9                   6f86882e145d        2 weeks ago         265.9 MB\nmongo               2.2                 8558fe135d54        5 months ago        236.9 MB\n```\n\n### Start PostgreSQL\nThe official [documentation](https://hub.docker.com/_/postgres/) touch up on the configuration parameters that are available. Let's start the server now by exposing it on laptop port 5433. \n```\ndocker run --name pg-server -e POSTGRES_PASSWORD=postgres  -v C:/Users/manju/docker/pg:/var/lib/postgresql/ -p5433:5432 -d postgres\n```\n\n### Connecting to Server\nThere are many ways to connect, I usually use PGAdmin. The following commands you can run to run `psql` from server container. \n```bash\ndocker ps  # to obtain the container id\n\ndocker exec -it <replace-container-d> bash\n\npsql\n\n```\n\n### Conclusion\nDocker makes it really easy to install software on demand. In my opinion Docker is a must have tool in a Test Engineers arsenal.  ","source":"_posts/Docker-PostgreSQL.md","raw":"---\ntitle: Docker - PostgreSQL\ndraft: true\ndate: 2016-09-16 10:05:52\ncategories:\n- database\ntags:\n- docker\n- postgresql\n---\n\nIn this post, I will briefly explain the steps to getup and running PostgreSQL docker image. I have explained in [Docker](docker.html) post the basics and how to configure and run MySQL. \n\n### Identifying the Image\nLet's begin by searching on [DockerHub](https://hub.docker.com/search/?isAutomated=0&isOfficial=0&page=1&pullCount=0&q=postgresql&starCount=0) and pick the official PostgreSQL version. \n```bash\ndocker pull postgresql:9\n```\nIf the pull is successful, you must see `postgresql` in the list of docker images. \n```\nmanju@MANJUTHINK C:\\workspace\\BLOGS\n> docker images\nREPOSITORY          TAG                 IMAGE ID            CREATED             SIZE\nmysql               5.5                 89f8142697a0        10 days ago         255.8 MB\nmongo               latest              48b8b08dca4d        2 weeks ago         366.4 MB\npostgres            9                   6f86882e145d        2 weeks ago         265.9 MB\nmongo               2.2                 8558fe135d54        5 months ago        236.9 MB\n```\n\n### Start PostgreSQL\nThe official [documentation](https://hub.docker.com/_/postgres/) touch up on the configuration parameters that are available. Let's start the server now by exposing it on laptop port 5433. \n```\ndocker run --name pg-server -e POSTGRES_PASSWORD=postgres  -v C:/Users/manju/docker/pg:/var/lib/postgresql/ -p5433:5432 -d postgres\n```\n\n### Connecting to Server\nThere are many ways to connect, I usually use PGAdmin. The following commands you can run to run `psql` from server container. \n```bash\ndocker ps  # to obtain the container id\n\ndocker exec -it <replace-container-d> bash\n\npsql\n\n```\n\n### Conclusion\nDocker makes it really easy to install software on demand. In my opinion Docker is a must have tool in a Test Engineers arsenal.  ","slug":"Docker-PostgreSQL","published":1,"updated":"2016-09-18T13:54:48.673Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cit8or5ps0000bwvbsy8hfuwc","content":"<p>In this post, I will briefly explain the steps to getup and running PostgreSQL docker image. I have explained in <a href=\"docker.html\">Docker</a> post the basics and how to configure and run MySQL. </p>\n<h3 id=\"Identifying-the-Image\"><a href=\"#Identifying-the-Image\" class=\"headerlink\" title=\"Identifying the Image\"></a>Identifying the Image</h3><p>Let’s begin by searching on <a href=\"https://hub.docker.com/search/?isAutomated=0&amp;isOfficial=0&amp;page=1&amp;pullCount=0&amp;q=postgresql&amp;starCount=0\" target=\"_blank\" rel=\"external\">DockerHub</a> and pick the official PostgreSQL version.<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker pull postgresql:9</div></pre></td></tr></table></figure></p>\n<p>If the pull is successful, you must see <code>postgresql</code> in the list of docker images.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">manju@MANJUTHINK C:\\workspace\\BLOGS</div><div class=\"line\">&gt; docker images</div><div class=\"line\">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</div><div class=\"line\">mysql               5.5                 89f8142697a0        10 days ago         255.8 MB</div><div class=\"line\">mongo               latest              48b8b08dca4d        2 weeks ago         366.4 MB</div><div class=\"line\">postgres            9                   6f86882e145d        2 weeks ago         265.9 MB</div><div class=\"line\">mongo               2.2                 8558fe135d54        5 months ago        236.9 MB</div></pre></td></tr></table></figure></p>\n<h3 id=\"Start-PostgreSQL\"><a href=\"#Start-PostgreSQL\" class=\"headerlink\" title=\"Start PostgreSQL\"></a>Start PostgreSQL</h3><p>The official <a href=\"https://hub.docker.com/_/postgres/\" target=\"_blank\" rel=\"external\">documentation</a> touch up on the configuration parameters that are available. Let’s start the server now by exposing it on laptop port 5433.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker run --name pg-server -e POSTGRES_PASSWORD=postgres  -v C:/Users/manju/docker/pg:/var/lib/postgresql/ -p5433:5432 -d postgres</div></pre></td></tr></table></figure></p>\n<h3 id=\"Connecting-to-Server\"><a href=\"#Connecting-to-Server\" class=\"headerlink\" title=\"Connecting to Server\"></a>Connecting to Server</h3><p>There are many ways to connect, I usually use PGAdmin. The following commands you can run to run <code>psql</code> from server container.<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker ps  <span class=\"comment\"># to obtain the container id</span></div><div class=\"line\"></div><div class=\"line\">docker <span class=\"built_in\">exec</span> -it &lt;replace-container<span class=\"_\">-d</span>&gt; bash</div><div class=\"line\"></div><div class=\"line\">psql</div></pre></td></tr></table></figure></p>\n<h3 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h3><p>Docker makes it really easy to install software on demand. In my opinion Docker is a must have tool in a Test Engineers arsenal.  </p>\n","excerpt":"","more":"<p>In this post, I will briefly explain the steps to getup and running PostgreSQL docker image. I have explained in <a href=\"docker.html\">Docker</a> post the basics and how to configure and run MySQL. </p>\n<h3 id=\"Identifying-the-Image\"><a href=\"#Identifying-the-Image\" class=\"headerlink\" title=\"Identifying the Image\"></a>Identifying the Image</h3><p>Let’s begin by searching on <a href=\"https://hub.docker.com/search/?isAutomated=0&amp;isOfficial=0&amp;page=1&amp;pullCount=0&amp;q=postgresql&amp;starCount=0\">DockerHub</a> and pick the official PostgreSQL version.<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker pull postgresql:9</div></pre></td></tr></table></figure></p>\n<p>If the pull is successful, you must see <code>postgresql</code> in the list of docker images.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">manju@MANJUTHINK C:\\workspace\\BLOGS</div><div class=\"line\">&gt; docker images</div><div class=\"line\">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</div><div class=\"line\">mysql               5.5                 89f8142697a0        10 days ago         255.8 MB</div><div class=\"line\">mongo               latest              48b8b08dca4d        2 weeks ago         366.4 MB</div><div class=\"line\">postgres            9                   6f86882e145d        2 weeks ago         265.9 MB</div><div class=\"line\">mongo               2.2                 8558fe135d54        5 months ago        236.9 MB</div></pre></td></tr></table></figure></p>\n<h3 id=\"Start-PostgreSQL\"><a href=\"#Start-PostgreSQL\" class=\"headerlink\" title=\"Start PostgreSQL\"></a>Start PostgreSQL</h3><p>The official <a href=\"https://hub.docker.com/_/postgres/\">documentation</a> touch up on the configuration parameters that are available. Let’s start the server now by exposing it on laptop port 5433.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker run --name pg-server -e POSTGRES_PASSWORD=postgres  -v C:/Users/manju/docker/pg:/var/lib/postgresql/ -p5433:5432 -d postgres</div></pre></td></tr></table></figure></p>\n<h3 id=\"Connecting-to-Server\"><a href=\"#Connecting-to-Server\" class=\"headerlink\" title=\"Connecting to Server\"></a>Connecting to Server</h3><p>There are many ways to connect, I usually use PGAdmin. The following commands you can run to run <code>psql</code> from server container.<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker ps  <span class=\"comment\"># to obtain the container id</span></div><div class=\"line\"></div><div class=\"line\">docker <span class=\"built_in\">exec</span> -it &lt;replace-container<span class=\"_\">-d</span>&gt; bash</div><div class=\"line\"></div><div class=\"line\">psql</div></pre></td></tr></table></figure></p>\n<h3 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h3><p>Docker makes it really easy to install software on demand. In my opinion Docker is a must have tool in a Test Engineers arsenal.  </p>\n"},{"title":"SQL Tricks - Finding Duplicates","date":"2016-09-16T14:03:42.000Z","_content":"In today's post I will be looking into few of the commonly used SQL queries and functions. To demonstrate the queries, we will using PostgreSQL database. In [Docker-PostgreSQL](Docker-PostgreSQL.md), I have outlined the steps to run a PostgreSQL container. You can execute the [pg_hr_schema.sql](pg_hr_schema.sql) to populate data used in these examples. <!-- more --> Additionally lets insert few records into `locations`.  \n\n```\nINSERT INTO locations VALUES \n        ( 4000 \n        , 'Murtenstrasse 921'\n        , '3095'\n        , 'Bern'\n        , 'BE'\n        , 'CH'\n        );\n\nINSERT INTO locations VALUES \n        ( 4100 \n        , 'Pieter Breughelstraat 837'\n        , '3029SK'\n        , 'Utrecht'\n        , 'Utrecht'\n        , 'NL'\n        );\n\nINSERT INTO locations VALUES \n        ( 4200 \n        , 'Mariano Escobedo 9991'\n        , '11932'\n        , 'Mexico City'\n        , 'Distrito Federal,'\n        , 'MX'\n        );\n\n\n\nINSERT INTO locations VALUES \n        ( 5000 \n        , 'Murtenstrasse 921'\n        , '3095'\n        , 'Bern'\n        , 'BE'\n        , 'CH'\n        );\n\nINSERT INTO locations VALUES \n        ( 5100 \n        , 'Pieter Breughelstraat 837'\n        , '3029SK'\n        , 'Utrecht'\n        , 'Utrecht'\n        , 'NL'\n        );\n\nINSERT INTO locations VALUES \n        ( 5200 \n        , 'Mariano Escobedo 9991'\n        , '11932'\n        , 'Mexico City'\n        , 'Distrito Federal,'\n        , 'MX'\n        );        \n```\n\n### Finding Duplicates\n \n ```sql\n\nselect street_address, postal_code, city, state_province, country_id, count(*) as cnt\nfrom locations \ngroup by street_address, postal_code, city, state_province, country_id\nhaving count(*) > 1\n \n ```\n \n ### Deleting duplicates\n Now that we have found the rows which are duplicate, lets delete the duplicate rows. To achieve this we will use `ctid`, the system identifier on each row.\n \n ```sql\n \n delete from locations where ctid not in (\n    select max(ctid) from locations \n    group by street_address, postal_code, city, state_province, country_id\n );\n\n ```\n What is `ctid` column ?\n > The physical location of the row version within its table. Note that although the ctid can be used to locate the row version very quickly, a row's ctid will change if it is updated or moved by VACUUM FULL. Therefore ctid is useless as a long-term row identifier. The OID, or even better a user-defined serial number, should be used to identify logical rows.","source":"_posts/SQL-Tricks-Finding-Duplicates.md","raw":"---\ntitle: SQL Tricks - Finding Duplicates\ndate: 2016-09-16 10:03:42\ncategories:\n- database\ntags:\n- SQL\n- PostgreSQL\n---\nIn today's post I will be looking into few of the commonly used SQL queries and functions. To demonstrate the queries, we will using PostgreSQL database. In [Docker-PostgreSQL](Docker-PostgreSQL.md), I have outlined the steps to run a PostgreSQL container. You can execute the [pg_hr_schema.sql](pg_hr_schema.sql) to populate data used in these examples. <!-- more --> Additionally lets insert few records into `locations`.  \n\n```\nINSERT INTO locations VALUES \n        ( 4000 \n        , 'Murtenstrasse 921'\n        , '3095'\n        , 'Bern'\n        , 'BE'\n        , 'CH'\n        );\n\nINSERT INTO locations VALUES \n        ( 4100 \n        , 'Pieter Breughelstraat 837'\n        , '3029SK'\n        , 'Utrecht'\n        , 'Utrecht'\n        , 'NL'\n        );\n\nINSERT INTO locations VALUES \n        ( 4200 \n        , 'Mariano Escobedo 9991'\n        , '11932'\n        , 'Mexico City'\n        , 'Distrito Federal,'\n        , 'MX'\n        );\n\n\n\nINSERT INTO locations VALUES \n        ( 5000 \n        , 'Murtenstrasse 921'\n        , '3095'\n        , 'Bern'\n        , 'BE'\n        , 'CH'\n        );\n\nINSERT INTO locations VALUES \n        ( 5100 \n        , 'Pieter Breughelstraat 837'\n        , '3029SK'\n        , 'Utrecht'\n        , 'Utrecht'\n        , 'NL'\n        );\n\nINSERT INTO locations VALUES \n        ( 5200 \n        , 'Mariano Escobedo 9991'\n        , '11932'\n        , 'Mexico City'\n        , 'Distrito Federal,'\n        , 'MX'\n        );        \n```\n\n### Finding Duplicates\n \n ```sql\n\nselect street_address, postal_code, city, state_province, country_id, count(*) as cnt\nfrom locations \ngroup by street_address, postal_code, city, state_province, country_id\nhaving count(*) > 1\n \n ```\n \n ### Deleting duplicates\n Now that we have found the rows which are duplicate, lets delete the duplicate rows. To achieve this we will use `ctid`, the system identifier on each row.\n \n ```sql\n \n delete from locations where ctid not in (\n    select max(ctid) from locations \n    group by street_address, postal_code, city, state_province, country_id\n );\n\n ```\n What is `ctid` column ?\n > The physical location of the row version within its table. Note that although the ctid can be used to locate the row version very quickly, a row's ctid will change if it is updated or moved by VACUUM FULL. Therefore ctid is useless as a long-term row identifier. The OID, or even better a user-defined serial number, should be used to identify logical rows.","slug":"SQL-Tricks-Finding-Duplicates","published":1,"updated":"2016-09-19T01:27:02.278Z","_id":"cit9c4hd70003zkvbd8cz9a4n","comments":1,"layout":"post","photos":[],"link":"","content":"<p>In today’s post I will be looking into few of the commonly used SQL queries and functions. To demonstrate the queries, we will using PostgreSQL database. In <a href=\"Docker-PostgreSQL.md\">Docker-PostgreSQL</a>, I have outlined the steps to run a PostgreSQL container. You can execute the <a href=\"pg_hr_schema.sql\">pg_hr_schema.sql</a> to populate data used in these examples. <a id=\"more\"></a> Additionally lets insert few records into <code>locations</code>.  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div></pre></td><td class=\"code\"><pre><div class=\"line\">INSERT INTO locations VALUES </div><div class=\"line\">        ( 4000 </div><div class=\"line\">        , &apos;Murtenstrasse 921&apos;</div><div class=\"line\">        , &apos;3095&apos;</div><div class=\"line\">        , &apos;Bern&apos;</div><div class=\"line\">        , &apos;BE&apos;</div><div class=\"line\">        , &apos;CH&apos;</div><div class=\"line\">        );</div><div class=\"line\"></div><div class=\"line\">INSERT INTO locations VALUES </div><div class=\"line\">        ( 4100 </div><div class=\"line\">        , &apos;Pieter Breughelstraat 837&apos;</div><div class=\"line\">        , &apos;3029SK&apos;</div><div class=\"line\">        , &apos;Utrecht&apos;</div><div class=\"line\">        , &apos;Utrecht&apos;</div><div class=\"line\">        , &apos;NL&apos;</div><div class=\"line\">        );</div><div class=\"line\"></div><div class=\"line\">INSERT INTO locations VALUES </div><div class=\"line\">        ( 4200 </div><div class=\"line\">        , &apos;Mariano Escobedo 9991&apos;</div><div class=\"line\">        , &apos;11932&apos;</div><div class=\"line\">        , &apos;Mexico City&apos;</div><div class=\"line\">        , &apos;Distrito Federal,&apos;</div><div class=\"line\">        , &apos;MX&apos;</div><div class=\"line\">        );</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">INSERT INTO locations VALUES </div><div class=\"line\">        ( 5000 </div><div class=\"line\">        , &apos;Murtenstrasse 921&apos;</div><div class=\"line\">        , &apos;3095&apos;</div><div class=\"line\">        , &apos;Bern&apos;</div><div class=\"line\">        , &apos;BE&apos;</div><div class=\"line\">        , &apos;CH&apos;</div><div class=\"line\">        );</div><div class=\"line\"></div><div class=\"line\">INSERT INTO locations VALUES </div><div class=\"line\">        ( 5100 </div><div class=\"line\">        , &apos;Pieter Breughelstraat 837&apos;</div><div class=\"line\">        , &apos;3029SK&apos;</div><div class=\"line\">        , &apos;Utrecht&apos;</div><div class=\"line\">        , &apos;Utrecht&apos;</div><div class=\"line\">        , &apos;NL&apos;</div><div class=\"line\">        );</div><div class=\"line\"></div><div class=\"line\">INSERT INTO locations VALUES </div><div class=\"line\">        ( 5200 </div><div class=\"line\">        , &apos;Mariano Escobedo 9991&apos;</div><div class=\"line\">        , &apos;11932&apos;</div><div class=\"line\">        , &apos;Mexico City&apos;</div><div class=\"line\">        , &apos;Distrito Federal,&apos;</div><div class=\"line\">        , &apos;MX&apos;</div><div class=\"line\">        );</div></pre></td></tr></table></figure>\n<h3 id=\"Finding-Duplicates\"><a href=\"#Finding-Duplicates\" class=\"headerlink\" title=\"Finding Duplicates\"></a>Finding Duplicates</h3> <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">select</span> street_address, postal_code, city, state_province, country_id, <span class=\"keyword\">count</span>(*) <span class=\"keyword\">as</span> cnt</div><div class=\"line\"><span class=\"keyword\">from</span> locations </div><div class=\"line\"><span class=\"keyword\">group</span> <span class=\"keyword\">by</span> street_address, postal_code, city, state_province, country_id</div><div class=\"line\"><span class=\"keyword\">having</span> <span class=\"keyword\">count</span>(*) &gt; <span class=\"number\">1</span></div></pre></td></tr></table></figure>\n<h3 id=\"Deleting-duplicates\"><a href=\"#Deleting-duplicates\" class=\"headerlink\" title=\"Deleting duplicates\"></a>Deleting duplicates</h3><p> Now that we have found the rows which are duplicate, lets delete the duplicate rows. To achieve this we will use <code>ctid</code>, the system identifier on each row.</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">delete</span> <span class=\"keyword\">from</span> locations <span class=\"keyword\">where</span> ctid <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> (</div><div class=\"line\">   <span class=\"keyword\">select</span> <span class=\"keyword\">max</span>(ctid) <span class=\"keyword\">from</span> locations </div><div class=\"line\">   <span class=\"keyword\">group</span> <span class=\"keyword\">by</span> street_address, postal_code, city, state_province, country_id</div><div class=\"line\">);</div></pre></td></tr></table></figure>\n<p> What is <code>ctid</code> column ?</p>\n<blockquote>\n<p>The physical location of the row version within its table. Note that although the ctid can be used to locate the row version very quickly, a row’s ctid will change if it is updated or moved by VACUUM FULL. Therefore ctid is useless as a long-term row identifier. The OID, or even better a user-defined serial number, should be used to identify logical rows.</p>\n</blockquote>\n","excerpt":"<p>In today’s post I will be looking into few of the commonly used SQL queries and functions. To demonstrate the queries, we will using PostgreSQL database. In <a href=\"Docker-PostgreSQL.md\">Docker-PostgreSQL</a>, I have outlined the steps to run a PostgreSQL container. You can execute the <a href=\"pg_hr_schema.sql\">pg_hr_schema.sql</a> to populate data used in these examples.","more":"Additionally lets insert few records into <code>locations</code>.  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div></pre></td><td class=\"code\"><pre><div class=\"line\">INSERT INTO locations VALUES </div><div class=\"line\">        ( 4000 </div><div class=\"line\">        , &apos;Murtenstrasse 921&apos;</div><div class=\"line\">        , &apos;3095&apos;</div><div class=\"line\">        , &apos;Bern&apos;</div><div class=\"line\">        , &apos;BE&apos;</div><div class=\"line\">        , &apos;CH&apos;</div><div class=\"line\">        );</div><div class=\"line\"></div><div class=\"line\">INSERT INTO locations VALUES </div><div class=\"line\">        ( 4100 </div><div class=\"line\">        , &apos;Pieter Breughelstraat 837&apos;</div><div class=\"line\">        , &apos;3029SK&apos;</div><div class=\"line\">        , &apos;Utrecht&apos;</div><div class=\"line\">        , &apos;Utrecht&apos;</div><div class=\"line\">        , &apos;NL&apos;</div><div class=\"line\">        );</div><div class=\"line\"></div><div class=\"line\">INSERT INTO locations VALUES </div><div class=\"line\">        ( 4200 </div><div class=\"line\">        , &apos;Mariano Escobedo 9991&apos;</div><div class=\"line\">        , &apos;11932&apos;</div><div class=\"line\">        , &apos;Mexico City&apos;</div><div class=\"line\">        , &apos;Distrito Federal,&apos;</div><div class=\"line\">        , &apos;MX&apos;</div><div class=\"line\">        );</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">INSERT INTO locations VALUES </div><div class=\"line\">        ( 5000 </div><div class=\"line\">        , &apos;Murtenstrasse 921&apos;</div><div class=\"line\">        , &apos;3095&apos;</div><div class=\"line\">        , &apos;Bern&apos;</div><div class=\"line\">        , &apos;BE&apos;</div><div class=\"line\">        , &apos;CH&apos;</div><div class=\"line\">        );</div><div class=\"line\"></div><div class=\"line\">INSERT INTO locations VALUES </div><div class=\"line\">        ( 5100 </div><div class=\"line\">        , &apos;Pieter Breughelstraat 837&apos;</div><div class=\"line\">        , &apos;3029SK&apos;</div><div class=\"line\">        , &apos;Utrecht&apos;</div><div class=\"line\">        , &apos;Utrecht&apos;</div><div class=\"line\">        , &apos;NL&apos;</div><div class=\"line\">        );</div><div class=\"line\"></div><div class=\"line\">INSERT INTO locations VALUES </div><div class=\"line\">        ( 5200 </div><div class=\"line\">        , &apos;Mariano Escobedo 9991&apos;</div><div class=\"line\">        , &apos;11932&apos;</div><div class=\"line\">        , &apos;Mexico City&apos;</div><div class=\"line\">        , &apos;Distrito Federal,&apos;</div><div class=\"line\">        , &apos;MX&apos;</div><div class=\"line\">        );</div></pre></td></tr></table></figure>\n<h3 id=\"Finding-Duplicates\"><a href=\"#Finding-Duplicates\" class=\"headerlink\" title=\"Finding Duplicates\"></a>Finding Duplicates</h3> <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">select</span> street_address, postal_code, city, state_province, country_id, <span class=\"keyword\">count</span>(*) <span class=\"keyword\">as</span> cnt</div><div class=\"line\"><span class=\"keyword\">from</span> locations </div><div class=\"line\"><span class=\"keyword\">group</span> <span class=\"keyword\">by</span> street_address, postal_code, city, state_province, country_id</div><div class=\"line\"><span class=\"keyword\">having</span> <span class=\"keyword\">count</span>(*) &gt; <span class=\"number\">1</span></div></pre></td></tr></table></figure>\n<h3 id=\"Deleting-duplicates\"><a href=\"#Deleting-duplicates\" class=\"headerlink\" title=\"Deleting duplicates\"></a>Deleting duplicates</h3><p> Now that we have found the rows which are duplicate, lets delete the duplicate rows. To achieve this we will use <code>ctid</code>, the system identifier on each row.</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">delete</span> <span class=\"keyword\">from</span> locations <span class=\"keyword\">where</span> ctid <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> (</div><div class=\"line\">   <span class=\"keyword\">select</span> <span class=\"keyword\">max</span>(ctid) <span class=\"keyword\">from</span> locations </div><div class=\"line\">   <span class=\"keyword\">group</span> <span class=\"keyword\">by</span> street_address, postal_code, city, state_province, country_id</div><div class=\"line\">);</div></pre></td></tr></table></figure>\n<p> What is <code>ctid</code> column ?</p>\n<blockquote>\n<p>The physical location of the row version within its table. Note that although the ctid can be used to locate the row version very quickly, a row’s ctid will change if it is updated or moved by VACUUM FULL. Therefore ctid is useless as a long-term row identifier. The OID, or even better a user-defined serial number, should be used to identify logical rows.</p>\n</blockquote>"},{"title":"Appium - Getting Started","draft":true,"date":"2016-09-16T17:54:35.000Z","_content":"","source":"_posts/Appium-Getting-Started.md","raw":"---\ntitle: Appium - Getting Started\ndraft: true\ndate: 2016-09-16 13:54:35\ntags:\n---\n","slug":"Appium-Getting-Started","published":1,"updated":"2016-09-19T15:49:25.144Z","comments":1,"layout":"post","photos":[],"link":"","_id":"citaunvdd0000v8vb62eok70j","content":"","excerpt":"","more":""},{"title":"Testing RESTful API","date":"2016-09-16T11:12:44.000Z","_content":"Step1:\n\nI am going to test a current weather data using RestAPI service\nStep 1: Singn on https://home.openweathermap.org/ and get the API key.\n\nStep 2: Goto http://openweathermap.org/current.\n\n Choose the Call current weather data by city name\n         API call : api.openweathermap.org/data/2.5/weather?q={city name},{country code}\n        Example - api.openweathermap.org/data/2.5/weather?q=chantilly,us&appid=xxxxxx\n         \nStep 3: Click on Create REST project and add the URL = http://api.openweathermap.org/data/2.5/weather?q=Chantilly,us&appid=xxxxxx\n\nStep 4: Create a TestSuite ,after that add TestCase and add TestSteps \n \nChoose the GET request, we will get the  data based on parameter we passed.\n\nNow you can see a nicely formatted JSON response in the JSON view \n\n!(/downloads/weather/3.png)\n\nStep 5: Add the following assertion to validate the content of the response.\n\n1.Specify JSONpath expression to check the Longitude and Latitude are valid or not.\n2.JSON path match valid or not\n3.Specify JSONpath existance match valid or not\n\n!(/downloads/weather/4.png)\n        \n\n \n\n","source":"_posts/Testing-RESTful-API.md","raw":"---\ntitle: Testing RESTful API\ndate: 2016-09-16 07:12:44\ncategories:\n- tools\ntags:\n- REST\n- SoapUI\n---\nStep1:\n\nI am going to test a current weather data using RestAPI service\nStep 1: Singn on https://home.openweathermap.org/ and get the API key.\n\nStep 2: Goto http://openweathermap.org/current.\n\n Choose the Call current weather data by city name\n         API call : api.openweathermap.org/data/2.5/weather?q={city name},{country code}\n        Example - api.openweathermap.org/data/2.5/weather?q=chantilly,us&appid=xxxxxx\n         \nStep 3: Click on Create REST project and add the URL = http://api.openweathermap.org/data/2.5/weather?q=Chantilly,us&appid=xxxxxx\n\nStep 4: Create a TestSuite ,after that add TestCase and add TestSteps \n \nChoose the GET request, we will get the  data based on parameter we passed.\n\nNow you can see a nicely formatted JSON response in the JSON view \n\n!(/downloads/weather/3.png)\n\nStep 5: Add the following assertion to validate the content of the response.\n\n1.Specify JSONpath expression to check the Longitude and Latitude are valid or not.\n2.JSON path match valid or not\n3.Specify JSONpath existance match valid or not\n\n!(/downloads/weather/4.png)\n        \n\n \n\n","slug":"Testing-RESTful-API","published":1,"updated":"2016-09-20T02:21:50.091Z","_id":"citauu9x10000lkvbdcviuzf4","comments":1,"layout":"post","photos":[],"link":"","content":"<p>Step1:</p>\n<p>I am going to test a current weather data using RestAPI service<br>Step 1: Singn on <a href=\"https://home.openweathermap.org/\" target=\"_blank\" rel=\"external\">https://home.openweathermap.org/</a> and get the API key.</p>\n<p>Step 2: Goto <a href=\"http://openweathermap.org/current\" target=\"_blank\" rel=\"external\">http://openweathermap.org/current</a>.</p>\n<p> Choose the Call current weather data by city name<br>         API call : api.openweathermap.org/data/2.5/weather?q={city name},{country code}<br>        Example - api.openweathermap.org/data/2.5/weather?q=chantilly,us&amp;appid=xxxxxx</p>\n<p>Step 3: Click on Create REST project and add the URL = <a href=\"http://api.openweathermap.org/data/2.5/weather?q=Chantilly,us&amp;appid=xxxxxx\" target=\"_blank\" rel=\"external\">http://api.openweathermap.org/data/2.5/weather?q=Chantilly,us&amp;appid=xxxxxx</a></p>\n<p>Step 4: Create a TestSuite ,after that add TestCase and add TestSteps </p>\n<p>Choose the GET request, we will get the  data based on parameter we passed.</p>\n<p>Now you can see a nicely formatted JSON response in the JSON view </p>\n<p>!(/downloads/weather/3.png)</p>\n<p>Step 5: Add the following assertion to validate the content of the response.</p>\n<p>1.Specify JSONpath expression to check the Longitude and Latitude are valid or not.<br>2.JSON path match valid or not<br>3.Specify JSONpath existance match valid or not</p>\n<p>!(/downloads/weather/4.png)</p>\n","excerpt":"","more":"<p>Step1:</p>\n<p>I am going to test a current weather data using RestAPI service<br>Step 1: Singn on <a href=\"https://home.openweathermap.org/\">https://home.openweathermap.org/</a> and get the API key.</p>\n<p>Step 2: Goto <a href=\"http://openweathermap.org/current\">http://openweathermap.org/current</a>.</p>\n<p> Choose the Call current weather data by city name<br>         API call : api.openweathermap.org/data/2.5/weather?q={city name},{country code}<br>        Example - api.openweathermap.org/data/2.5/weather?q=chantilly,us&amp;appid=xxxxxx</p>\n<p>Step 3: Click on Create REST project and add the URL = <a href=\"http://api.openweathermap.org/data/2.5/weather?q=Chantilly,us&amp;appid=xxxxxx\">http://api.openweathermap.org/data/2.5/weather?q=Chantilly,us&amp;appid=xxxxxx</a></p>\n<p>Step 4: Create a TestSuite ,after that add TestCase and add TestSteps </p>\n<p>Choose the GET request, we will get the  data based on parameter we passed.</p>\n<p>Now you can see a nicely formatted JSON response in the JSON view </p>\n<p>!(/downloads/weather/3.png)</p>\n<p>Step 5: Add the following assertion to validate the content of the response.</p>\n<p>1.Specify JSONpath expression to check the Longitude and Latitude are valid or not.<br>2.JSON path match valid or not<br>3.Specify JSONpath existance match valid or not</p>\n<p>!(/downloads/weather/4.png)</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cit7fugnf00067gvbn7avoh84","category_id":"cit7fugn800037gvbwq6i0i1w","_id":"cit7fugno000c7gvbic0n50w8"},{"post_id":"cit7fugnm000b7gvbd8j9iv88","category_id":"cit7fugnx000m7gvbc0ynlivu","_id":"cit7fugoe00127gvb6rqgv9cb"},{"post_id":"cit7gg7t300004wvb1iz6z085","category_id":"cit7fugnq000e7gvbybhn75l4","_id":"cit7gg7t600024wvbs75dqy25"},{"post_id":"cit7fugmv00007gvboeoiewci","category_id":"cit83bg210006fkvbk0ea0s24","_id":"cit83bg280008fkvbai42dn83"},{"post_id":"cit7fugn400027gvbkft2k9hy","category_id":"cit83b3gm0004fkvbwbb839sh","_id":"cit83d2yv000bfkvbnxa3d6z7"},{"post_id":"cit7fugnm000b7gvbd8j9iv88","category_id":"cit83e4ad000ffkvbm7owe6yu","_id":"cit83e4af000gfkvbm6h3grr6"},{"post_id":"cit7fugor001f7gvblpzcxzmj","category_id":"cit83en3t000ifkvbsmy8uqfr","_id":"cit83en3y000jfkvbygil9c9f"},{"post_id":"cit7fugo2000u7gvb6legnpc8","category_id":"cit7fugnx000m7gvbc0ynlivu","_id":"cit83kig1000lfkvbk16g6iyk"},{"post_id":"cit7fugny000o7gvbv2uyl79h","category_id":"cit83en3t000ifkvbsmy8uqfr","_id":"cit83kihk000nfkvby5ztqtyi"},{"post_id":"cit7fugom001a7gvbp86ggqf7","category_id":"cit7fugnx000m7gvbc0ynlivu","_id":"cit83kii9000qfkvbalkihe5b"},{"post_id":"cit7fugnw000k7gvbdgmf5egs","category_id":"cit83en3t000ifkvbsmy8uqfr","_id":"cit83kijy000ufkvbb5uahquf"},{"post_id":"cit7fugnp000d7gvbmj3z70kr","category_id":"cit7fugnx000m7gvbc0ynlivu","_id":"cit83kik0000wfkvbolr2i103"},{"post_id":"cit7fugns000h7gvbd2zdb04k","category_id":"cit7fugnx000m7gvbc0ynlivu","_id":"cit83kshv000yfkvb5jkpl3kt"},{"post_id":"cit7fugo4000w7gvbdcyxd6wu","category_id":"cit83en3t000ifkvbsmy8uqfr","_id":"cit83mppx0011fkvbqa9kjd4a"},{"post_id":"cit7fugob00107gvb51m8uvvo","category_id":"cit83en3t000ifkvbsmy8uqfr","_id":"cit83n5050015fkvbkc0mvkqd"},{"post_id":"cit7fugof00137gvbsu0o2qgo","category_id":"cit83en3t000ifkvbsmy8uqfr","_id":"cit83nj8d0019fkvbtsufdyx3"},{"post_id":"cit7fugoj00177gvbrzt9gt6t","category_id":"cit83en3t000ifkvbsmy8uqfr","_id":"cit83nnw1001bfkvb71udio2f"},{"post_id":"cit7fugop001c7gvbe9lxdbmp","category_id":"cit83en3t000ifkvbsmy8uqfr","_id":"cit83nt41001dfkvb373a4lml"},{"post_id":"cit7fugo0000q7gvbr9ujs62v","category_id":"cit83q43k001hfkvbbdatadr0","_id":"cit83q43p001kfkvbg96kysmc"},{"post_id":"cit8or5ps0000bwvbsy8hfuwc","category_id":"cit83en3t000ifkvbsmy8uqfr","_id":"cit8or5q20002bwvbxd9b6bkm"},{"post_id":"cit9c4hd70003zkvbd8cz9a4n","category_id":"cit83en3t000ifkvbsmy8uqfr","_id":"cit9c4hde0005zkvbbnrdtw83"},{"post_id":"citauu9x10000lkvbdcviuzf4","category_id":"cit7fugnx000m7gvbc0ynlivu","_id":"citauu9x40002lkvb2sxd2jh3"}],"PostTag":[{"post_id":"cit7fugnf00067gvbn7avoh84","tag_id":"cit7fugnb00047gvb5m0pba7h","_id":"cit7fugnm000a7gvbnysm75fj"},{"post_id":"cit7fugn400027gvbkft2k9hy","tag_id":"cit7fugnb00047gvb5m0pba7h","_id":"cit7fugnz000p7gvbm2wtzy4c"},{"post_id":"cit7fugnm000b7gvbd8j9iv88","tag_id":"cit7fugo2000t7gvb85gmlrpz","_id":"cit7fugoy001k7gvb3wcbf8u9"},{"post_id":"cit7fugnp000d7gvbmj3z70kr","tag_id":"cit7fugox001j7gvb8thoq8vs","_id":"cit7fugp0001q7gvbq6ladqxf"},{"post_id":"cit7fugnp000d7gvbmj3z70kr","tag_id":"cit7fugoy001m7gvb5buq2khq","_id":"cit7fugp0001r7gvbizhzxrxz"},{"post_id":"cit7fugo2000u7gvb6legnpc8","tag_id":"cit7fugoz001p7gvbg4ezxans","_id":"cit7fugp1001v7gvb7lgwg30s"},{"post_id":"cit7fugo2000u7gvb6legnpc8","tag_id":"cit7fugp1001s7gvb77w0tygz","_id":"cit7fugp2001w7gvb6f9obuf3"},{"post_id":"cit7fugor001f7gvblpzcxzmj","tag_id":"cit7fugo2000t7gvb85gmlrpz","_id":"cit7fugp3001z7gvbp2euksws"},{"post_id":"cit7fugor001f7gvblpzcxzmj","tag_id":"cit7fugp2001x7gvbdhllk9rq","_id":"cit7fugp300207gvbtzve53bs"},{"post_id":"cit7gg7t300004wvb1iz6z085","tag_id":"cit7fugnx000n7gvb8hsxa6d4","_id":"cit7gg7t600014wvbbrmwsv2v"},{"post_id":"cit7fugmv00007gvboeoiewci","tag_id":"cit83ahhl0001fkvbtd5bvkg4","_id":"cit83ahho0002fkvbbai9iwh1"},{"post_id":"cit7fugn400027gvbkft2k9hy","tag_id":"cit83d2yt000afkvb1nxovibo","_id":"cit83d2yw000cfkvbx1w4ttsa"},{"post_id":"cit7fugmv00007gvboeoiewci","tag_id":"cit7fugnb00047gvb5m0pba7h","_id":"cit83d2za000dfkvbrvpvqljb"},{"post_id":"cit7fugny000o7gvbv2uyl79h","tag_id":"cit7fugow001h7gvbimeosuo6","_id":"cit83kihj000mfkvbt0ftascz"},{"post_id":"cit7fugny000o7gvbv2uyl79h","tag_id":"cit7fugoq001e7gvb0flu4dr8","_id":"cit83kihl000ofkvbkq04ekga"},{"post_id":"cit7fugom001a7gvbp86ggqf7","tag_id":"cit7fugoz001p7gvbg4ezxans","_id":"cit83kiib000rfkvbswcefm2p"},{"post_id":"cit7fugom001a7gvbp86ggqf7","tag_id":"cit83kii7000pfkvb8f0jfrvy","_id":"cit83kiic000sfkvbkenfehgl"},{"post_id":"cit7fugnw000k7gvbdgmf5egs","tag_id":"cit7fugow001h7gvbimeosuo6","_id":"cit83kijv000tfkvbosshhuzv"},{"post_id":"cit7fugnw000k7gvbdgmf5egs","tag_id":"cit7fugoq001e7gvb0flu4dr8","_id":"cit83kijz000vfkvbpfrq7epr"},{"post_id":"cit7fugns000h7gvbd2zdb04k","tag_id":"cit7fugoz001p7gvbg4ezxans","_id":"cit83kshu000xfkvbdww2f5aq"},{"post_id":"cit7fugns000h7gvbd2zdb04k","tag_id":"cit83kii7000pfkvb8f0jfrvy","_id":"cit83kshw000zfkvb8vne4vx5"},{"post_id":"cit7fugo4000w7gvbdcyxd6wu","tag_id":"cit83mppv0010fkvbxi7jv9bu","_id":"cit83mppy0012fkvbbap86l41"},{"post_id":"cit7fugob00107gvb51m8uvvo","tag_id":"cit83mppv0010fkvbxi7jv9bu","_id":"cit83n5040014fkvb5omfo52u"},{"post_id":"cit7fugof00137gvbsu0o2qgo","tag_id":"cit83mppv0010fkvbxi7jv9bu","_id":"cit83nj8b0018fkvbcjxp9dz9"},{"post_id":"cit7fugoj00177gvbrzt9gt6t","tag_id":"cit83mppv0010fkvbxi7jv9bu","_id":"cit83nnvt001afkvb3sr3h0ik"},{"post_id":"cit7fugop001c7gvbe9lxdbmp","tag_id":"cit83mppv0010fkvbxi7jv9bu","_id":"cit83nt41001cfkvbbw3lttz6"},{"post_id":"cit7fugo0000q7gvbr9ujs62v","tag_id":"cit83q43l001ifkvbi4lbwmhy","_id":"cit83q43o001jfkvbjtzn1aw9"},{"post_id":"cit8or5ps0000bwvbsy8hfuwc","tag_id":"cit7fugo2000t7gvb85gmlrpz","_id":"cit8or5q20001bwvbjl53xiv0"},{"post_id":"cit8or5ps0000bwvbsy8hfuwc","tag_id":"cit7fugo9000z7gvbem7hp8n1","_id":"cit8or5q20003bwvb0ipub377"},{"post_id":"cit7fugnm000b7gvbd8j9iv88","tag_id":"cit7fugoq001e7gvb0flu4dr8","_id":"cit8rku7l0000zkvbx5w4k4sz"},{"post_id":"cit9c4hd70003zkvbd8cz9a4n","tag_id":"cit83mppv0010fkvbxi7jv9bu","_id":"cit9c4hdd0004zkvbgktksn7w"},{"post_id":"cit9c4hd70003zkvbd8cz9a4n","tag_id":"cit9asjmf0001zkvb093bfmuc","_id":"cit9c4hde0006zkvbg7iy2pl2"},{"post_id":"citauu9x10000lkvbdcviuzf4","tag_id":"cit7fugoz001p7gvbg4ezxans","_id":"citauu9x30001lkvbqr0kk4hi"},{"post_id":"citauu9x10000lkvbdcviuzf4","tag_id":"cit83kii7000pfkvb8f0jfrvy","_id":"citauu9x40003lkvbfkvwuwkk"}],"Tag":[{"name":"agile","_id":"cit7fugnb00047gvb5m0pba7h"},{"name":"isstqb","_id":"cit7fugnk00097gvb0x0ylh4l"},{"name":"egg","_id":"cit7fugnx000n7gvb8hsxa6d4"},{"name":"docker","_id":"cit7fugo2000t7gvb85gmlrpz"},{"name":"postgresql","_id":"cit7fugo9000z7gvbem7hp8n1"},{"name":"database","_id":"cit7fugog00147gvb0ths7vlh"},{"name":"mongodb","_id":"cit7fugoq001e7gvb0flu4dr8"},{"name":"nosql","_id":"cit7fugow001h7gvbimeosuo6"},{"name":"jmeter","_id":"cit7fugox001j7gvb8thoq8vs"},{"name":"performance","_id":"cit7fugoy001m7gvb5buq2khq"},{"name":"automation","_id":"cit7fugoz001o7gvb0kbxzhul"},{"name":"REST","_id":"cit7fugoz001p7gvbg4ezxans"},{"name":"API","_id":"cit7fugp1001s7gvb77w0tygz"},{"name":"sql, sql-joins, mysql","_id":"cit7fugp1001u7gvbdulliqh6"},{"name":"mysql","_id":"cit7fugp2001x7gvbdhllk9rq"},{"name":"istqb","_id":"cit83ahhl0001fkvbtd5bvkg4"},{"name":"persona","_id":"cit83d2yt000afkvb1nxovibo"},{"name":"SoapUI","_id":"cit83kii7000pfkvb8f0jfrvy"},{"name":"SQL","_id":"cit83mppv0010fkvbxi7jv9bu"},{"name":"testing","_id":"cit83q43l001ifkvbi4lbwmhy"},{"name":"PostgreSQL","_id":"cit9asjmf0001zkvb093bfmuc"}]}}